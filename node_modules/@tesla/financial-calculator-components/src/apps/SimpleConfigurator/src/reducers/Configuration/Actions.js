import {
    request$
} from 'utils'
import _get from 'lodash/get'
const Agent = require('@tesla/agent')

import {
    APP_NAME,
    CONFIGURATION_CHANGE,
    SELECT_OPTION,
    INIT_CONFIGURATOR,
    CONFIGURATOR_DATA_LOADED,
    RUNTIME_EXCEPTION
} from 'dictionary';


export function fireInitialConfiguration(action$, store){
    return action$.ofType(CONFIGURATOR_DATA_LOADED).map( action => configurationChange({}))
}

export function getLexiconEpic(action$, store) {

    const state = store.getState()
    const {
        m3_lexicon_endpoint
    } = _.get(state, `${APP_NAME}/App.env`)

    return action$.ofType(INIT_CONFIGURATOR)
        .mergeMap(() => {
            return request$(m3_lexicon_endpoint).map(lexicon => getLexiconLoadComplete({
                lexicon
            }))
        })
}

export function getLexiconLoadComplete({lexicon}) {
    return {
        type: CONFIGURATOR_DATA_LOADED,
        lexicon,
        ui: buildUIData(lexicon)
    }
}

export function configurationChange({ options, selectedOption }){

    return (dispatch, getState) => {
        const state =  getState()
        const lexicon = _get(state,`${APP_NAME}/Configuration.lexicon`)
        const lastOptions = _get(state,`${APP_NAME}/Configuration.currentOptions`).slice(0)

        const currentOptions = options ? options : Agent.toggleOptionByGroup({
            options: lastOptions,                      
            option: selectedOption,                  
            lexicon 
        })

        const subTotal = Agent.getSubTotal(currentOptions, lexicon)

        dispatch({
            type: CONFIGURATION_CHANGE,
            currentOptions,
            subTotal,
            selectedOption
        })
    }
}

export function selectOption({option}) {
    return configurationChange({selectedOption: option})
}

function buildUIData(lexicon) {
    const ignore = [
        'MODEL',
        'STD_INTERIOR',
        'SOP',
        'POST_SOP',
        'FIRST_PRODUCTION', 
        'PREMIUM_PACKAGE', 
        'COLOR_AND_WHEELS', 
        'REVIEW_ORDER', 
        'STD_PACKAGE', 
        'BATTERY_AND_DRIVE', 
        'OPTIONS', 
        'CORE', 
        'PACKAGES'
    ]

    const groups = lexicon.groups.reduce((r0, grp, i) => {
        if (!ignore.includes(grp.code)) {
            let uiGroup = {
                name: grp.name,
                code: grp.code,
                options: grp.options.reduce((r1, optCode) => {
                    let isFutureOption = _get(lexicon, `options.${optCode}.extra_content`, []).reduce((r, opt)=>{
                        if(opt.type === 'future_option') {
                            r = true
                        }
                        return r
                    }, false)
                    let uiOpt = {
                        code: optCode,
                        name: _get(lexicon, `options.${optCode}.name`),
                        price: _get(lexicon, `options.${optCode}.price`),
                        isFutureOption
                    }
                    r1.push(uiOpt)
                    return r1
                }, [])
              }
              r0.push(uiGroup)              
        }
        return r0
    }, [])

    return {
        groups
    }
}