import React, { Component } from 'react'
import { connect } from 'react-redux'
import classnames from 'classnames'
import _get from 'lodash/get'

import {APP_NAME} from 'dictionary'
import {configurationChange} from 'actions'


const Option = ({option, onClick, isSelected}) => {
     const style = option.color ? {backgroundColor:option.color} : {backgroundImage: `url(${option.image})`}
     return (
        <div className={'selector--option'} onClick={onClick}>
          <div className={`selector--option-asset ${isSelected ? 'selected' : ''}`} style={style}></div>
        </div>
     )
}


class Selector extends Component {

    render() {

        const { options = [], selectedOption, group, title, configurationChange, pricing } = this.props

        return (
            <div className={`selector--container ${group}`}>
                <h3 className='selector--container--title'>{title}</h3>
                <div className='selector--container--options'>
                {options.map((option, i)=>{
                    return <Option key={`option-${option.code}`} pricing={pricing} isSelected={selectedOption === option.code} option={option} onClick={()=>configurationChange(option, group)} />
                })}

                <div>{pricing}</div>                
                </div>
            </div>
        )
    }
}

function mapStateToProps (state, ownProps) {

    const key = `${APP_NAME}/Configuration`
    const {options, selectedOption, title} = _get(state,`${key}.groups.${ownProps.group}`, {})

    return {
        group: ownProps.group,
        title,
        selectedOption,
        options,
        pricing: _get(state, `${key}.pricing.${ownProps.group}`)
    }
}


function mapDispatchToProps (dispatch) {

    return {
        configurationChange: (selectedOption, group) => {
            dispatch(configurationChange({selectedOptions: [selectedOption], group}))
        }
    }

}

export default connect(mapStateToProps, mapDispatchToProps)(Selector)