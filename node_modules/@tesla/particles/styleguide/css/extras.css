/*doc

---
title: Typography Variables
name: 01_typography
category: Typography
---
<br>
Styling things for international markets can sometimes be a pain. The variables located here give Developers the ability to style fonts in the website based on the locale that the page is rendered in.

Here are all the variables that are currently available

```sass_example
// Base font size
$base-font-size: 16px;

$font-path: '/assets/fonts/' !default;

// Gotham Variables
$gotham-light: 'Gotham Light'; // font-weight: 100;
$gotham-book: 'Gotham Book'; // font-weight: 300;
$gotham-medium: 'Gotham Medium'; // font-weight: 500;
$gotham-bold: 'Gotham Bold'; // font-weight: 700;

// Base font stack
$fonts-base: Arial, sans-serif;
$fonts-opensans: 'Open Sans';
$fonts-base-secondary: 'HelveticaNeue-Regular', 'Helvetica Neue Regular', 'Helvetica Neue', Helvetica, $fonts-base;
$fonts-fancypants: 'Palatino' !default;
$fonts-monospace: 'Menlo', 'Monaco', 'Courier New', monospace !default;

// Japanese font stack
$fonts-jp-primary: 'AXIS Font Japanese W55' !default;
$fonts-jp-secondary: 'Hiragino Kaku Gothic ProN' !default;

// Chinese font stack
$fonts-china-primary: 'M Hei PRC W45' !default;
$fonts-china-secondary: 'HeiS ASC Simplified Chinese', 'HeiS ASC Simplified Chinese_n5' !default;

// Traditional Chinese font stack
$fonts-traditional-chinese-primary: 'M Hei HK W42', 'M Hei HK W40' !default;
$fonts-traditional-chinese-secondary: 'HeiT ASC Traditional Chinese' !default;

// Combined China font stack
$fontstack-china-primary: $fonts-china-primary, $fonts-traditional-chinese-primary !default;
$fontstack-china-secondary: $fonts-china-secondary, $fonts-traditional-chinese-secondary !default;

// Actual font stack variables to be used by the typography mixin:
$fonts-secondary: $fontstack-china-secondary, $fonts-base-secondary !default;
```
*/
/*doc

---
categories: Variables
title: Locale Variables
name: 00_localevarsintro
---

Styling things for international markets can sometimes be a pain. The variables located here give Developers the ability to style parts of the website based on the locale that the page is rendered in. The locale class needs to be added to a part of the website that is as high up as possible - e.g. the `body` or `html` tag. For tesla.com, the locale class is added by to the `body` tag via some PHP/Drupal logic.


## Example

Here are a couple examples of how you can use the locale variables in your code.

### Basic Usage

```sass_example
.i18n-ja_JP {
  background-color: #f00;
}
```

```css_example
.i18n-jp {
  background-color: #f00;
}
```

### Parent selector usage
```sass_example
.someclass {
  color: red;
  .i18n-ja_JP & {
    color: purple;
  }
}
```

```css_example
.someclass {
  color: red;
}
.i18n-jp .someclass {
  color: purple;
}
```

## Let's talk about CSS specificity
As a developer, organization can carry significant weight when building a new gadget. You will be tempted to nest your selectors because then it looks like a neat package.

**YOU MUST FIGHT THIS URGE**. Just because you *can* nest things, doesn't necessarily mean that you *should* nest things.

When writing Sass, keep asking yourself this question:

> What will this selector look like when it is rendered in plain CSS?

If you start seeing a lot of nesting ask yourself:

> Can this become less specfiic without messing up styles downstream?
If you are unsure what your CSS would look like, just take a look at how your nesting is set up. How flat is the Sass? Are you using

Obviously, you can get much more complex selectors, but these are the two most common usages for the locale variables.

*/
/*doc
---
categories: Variables
title: All available locale variables
name: 02_localevarexample
parent: 00_localevarsintro
---

Here are all the variables that are currently available

```sass_example
// Super regions
$region-na:                  superregion-north-america;
$region-eu:                  superregion-europe;
$region-apac:                superregion-apac;
$region-me:                  superregion-middle-east;

// North America
$locale-canada_english:      i18n-en_CA; // en_CA
$locale-canada_french:       i18n-fr_CA; // fr_CA
$locale-mexico_spanish:      i18n-es_MX; // es_MX
$locale-us_english:          i18n-en_US; // US

// Europe
$locale-belgium_french:      i18n-fr_BE; // fr_BE
$locale-belgium_dutch:       i18n-nl_BE; // nl_BE
$locale-denmark_danish:      i18n-da_DK; // da_DK
$locale-germany_german:      i18n-de_DE; // de_DE
$locale-france_french:       i18n-fr_FR; // fr_FR
$locale-great_britain:       i18n-en_GB; // en_GB
$locale-italy_italian:       i18n-it_IT; // it_IT
$locale-ireland:             i18n-en_IE; // en_IE
$locale-netherlands_dutch:   i18n-nl_NL; // nl_NL
$locale-norway_norwegian:    i18n-no_NO; // no_NO

$locale-austria:             i18n-de_AT; // de_AT
$locale-switzerland_german:  i18n-de_CH; // de_CH
$locale-switzerland_french:  i18n-fr_CH; // fr_CH
$locale-switzerland_italian: i18n-it_CH; // it_CH
$locale-sweden:              i18n-sv_SE; // sv_SE
$locale-other_europe:        i18n-en_EU; // en_EU
$locale-finland:             i18n-fi_FI; // fi_FI
$locale-luxembourg_french:   i18n-fr_LU; // fr_LU
$locale-luxembourg_german:   i18n-de_LU; // de_LU
$locale-portugal:            i18n-pt_PT; // pt_PT
$locale-spain:               i18n-es_ES; // es_ES

// Asia-Pacific
$locale-australia:           i18n-en_AU; // en_AU
$locale-china:               i18n-zh_CN; // zh_CN
$locale-hongkong:            i18n-en_HK; // en_HK
$locale-hongkong_chinese:    i18n-zh_HK; // zh_HK
$locale-macau:               i18n-en_MO; // en_MO
$locale-macau_chinese:       i18n-zh_MO; // zh_MO
$locale-japan:               i18n-ja_JP; // Japan
$locale-new_zealand:         i18n-en_NZ; // en_NZ
$locale-taiwan:              i18n-zh_TW; // zh_TW
$locale-south_korea:         i18n-ko_KR; // ko_KR

// Middle-East
$locale-jordan_english:       i18n-en_JO; // en_JO
$locale-jordan_arabic:        i18n-ar_JO; // ar_JO
$locale-uae_english:          i18n-en_AE; // en_AE
$locale-uae_arabic:           i18n-ar_AE; // ar_AE
$locale-saudi-arabia_english: i18n-en_SA; // en_SA
$locale-saudi-arabia_arabic:  i18n-ar_SA; // ar_SA

// Africa
$locale-south_africa:        i18n-en_ZA; // not in Drupal language list default
```

The following variables are only to be used within the Drupal ecosystem:

```sass_example
$locale_us:                  i18n-en;    // US
$locale-denmark:             i18n-da;    // da_DK
$locale-germany:             i18n-de;    // de_DE
$locale-france:              i18n-fr;    // fr_FR
$locale-italy:               i18n-it;    // it_IT
$locale-netherlands:         i18n-nl;    // nl_NL
$locale-norway:              i18n-no;    // no_NO

```
*/
/*doc
---
title: Introduction
category: Colors
name: 00_colors
---

The colors represented below are considered approved for usage throughout the website. All of these variables can be overridden on a situational basis because they all have `!default` appended to it. This means that you can continue to use the color variables by name as listed here, but update their value to whatever you'd like for your feature.

An example of this would be the [/energy](https://www.tesla.com/energy) section of tesla.com. They are using a different color blue than the `$tesla-transactional` as listed below. The team is able use the correct color for blue but still use the correct variable. This makes it easy to update the colors across the system easily and simply without a lot of extra work.

*/
/*doc
---
title: Primary Colors
category: Colors
name: 01_colors
---


<div class="tsla-card_container">
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #c00;" data-hex="#c00" data-rgb="rgb(240,0,0)"></div>
    <div class="tsla-card_tile--meta">$tesla-primary</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #f00;" data-hex="#f00" data-rgb="rgb(255,0,0)"></div>
    <div class="tsla-card_tile--meta">$tesla-active</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #39f;" data-hex="#39f" data-rgb="rgb(51,153,255)"></div>
    <div class="tsla-card_tile--meta">$tesla-transactional</div>
  </div>
</div>

*/
/*doc
---
title: Grey Scale Colors
category: Colors
name: 02_colors
---


<div class="tsla-card_container">
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #000;" data-hex="#000" data-rgb="rgb(0,0,0)"></div>
    <div class="tsla-card_tile--meta">$black</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #111;" data-hex="#111" data-rgb="rgb(17,17,17)"></div>
    <div class="tsla-card_tile--meta">$grey-1</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #222;" data-hex="#222" data-rgb="rgb(34,34,34)"></div>
    <div class="tsla-card_tile--meta">$grey-2</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #333;" data-hex="#333" data-rgb="rgb(51,51,51)"></div>
    <div class="tsla-card_tile--meta">$grey-3</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #444;" data-hex="#444" data-rgb="rgb(68,68,68)"></div>
    <div class="tsla-card_tile--meta">$grey-4</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #666;" data-hex="#666" data-rgb="rgb(102,102,102)"></div>
    <div class="tsla-card_tile--meta">$grey-6</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #888;" data-hex="#888" data-rgb="rgb(136,136,136)"></div>
    <div class="tsla-card_tile--meta">$grey-8</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #999;" data-hex="#999" data-rgb="rgb(153,153,153)"></div>
    <div class="tsla-card_tile--meta">$grey-9</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #aaa;" data-hex="#aaa" data-rgb="rgb(170,170,170)"></div>
    <div class="tsla-card_tile--meta">$grey-a</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #bbb;" data-hex="#bbb" data-rgb="rgb(187,187,187)"></div>
    <div class="tsla-card_tile--meta">$grey-b</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #ccc;" data-hex="#ccc" data-rgb="rgb(204,204,204)"></div>
    <div class="tsla-card_tile--meta">$grey-c</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #ddd;" data-hex="#ddd" data-rgb="rgb(221,221,221)"></div>
    <div class="tsla-card_tile--meta">$grey-d</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #eee;" data-hex="#eee" data-rgb="rgb(238,238,238)"></div>
    <div class="tsla-card_tile--meta">$grey-e</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #fff;" data-hex="#fff" data-rgb="rgb(255,255,255)"></div>
    <div class="tsla-card_tile--meta">$white</div>
  </div>
</div>

*/
/*doc
---
title: Background Colors
category: Colors
name: 03_colors
---

<div class="tsla-card_container">
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #f2f2f2;" data-hex="#f2f2f2" data-rgb="rgb(242,242,242)"></div>
    <div class="tsla-card_tile--meta">$grey-background-color</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #f7f7f7;" data-hex="#f7f7f7" data-rgb="rgb(247,247,247)"></div>
    <div class="tsla-card_tile--meta">$grey-background-color-light</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #fafafa;" data-hex="#fafafa" data-rgb="rgb(250,250,250)"></div>
    <div class="tsla-card_tile--meta">$grey-background-color-lightest</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #fefefe;" data-hex="#fefefe" data-rgb="rgb(254,254,254)"></div>
    <div class="tsla-card_tile--meta">$grey-background-color-even-lighterest</div>
  </div>
</div>

*/
/*doc
---
title: Extra Colors
category: Colors
name: 04_colors
---

<div class="tsla-card_container">
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #4d4d4d;" data-hex="#4d4d4d" data-rgb="rgb(77,77,77)"></div>
    <div class="tsla-card_tile--meta">$border-footer</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #808080;" data-hex="#808080" data-rgb="rgb(128,128,128)"></div>
    <div class="tsla-card_tile--meta">$form-label-color</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #e5e5e5;" data-hex="#e5e5e5" data-rgb="rgb(229,229,229)"></div>
    <div class="tsla-card_tile--meta">$border-content</div>
  </div>
  <div class="tsla-card_tile tsla-card-has_overlay">
    <div class="tsla-card_tile--asset" style="background-color: #141414;" data-hex="#141414" data-rgb="rgb(20,20,20)"></div>
    <div class="tsla-card_tile--meta">$ui-text</div>
  </div>
</div>

*/
/*doc
---
title: Base "T-shirt" Sizes
category: Variables for Sizing
name: 00_intro
---

These variables are set up to give you a basic guideline from which to build your website. They are all override-able given the `!default` key being added.

```sass_example
$tsla-size--xsmall:  10px !default;
$tsla-size--small:   20px !default;
$tsla-size--medium:  30px !default;
$tsla-size--large:   40px !default;
$tsla-size--xlarge:  50px !default;
$tsla-size--xxlarge: 60px !default;
$tsla-size--jumbo:   70px !default;
```
*/
/*doc

---
title: Media Queries
name: 01_layout
category: Layout
---

When possible, we should aim to follow "Mobile first design" approach, i.e., desiging for smaller screens first, then tweak design / features / content for larger screens.

Below you'll see 2 sets of variables: Legacy and Next-gen. Currently [tesla.com](https://www.tesla.com) is based in the Legacy media queries and will likely remain so for the foreseeable future. We use the following media queries to create the key breakpoints in our grid system.

*/
/*doc
---
title: Available Media Queries
category: Layout
name: 02_layout
---

We have several media query variables that were developed a long time back and are starting to ... show their age. These are still relevant, but allowing for more flexibility to developers means having a few additional media queries available.

<table class="table">
  <thead class="table-head">
    <tr class="table-row">
      <th class="">Variable Name</th>
      <th class="">Value</th>
      <th class="">Sample Devices</th>
      <th class="" style="text-align: center;vertical-align: middle;">Type</th>
    </tr>
  </thead>
  <tfoot class="table-foot">
    <tr class="table-row">
      <td class="" colspan="4"><strong>Note:</strong> All of <a href="https://www.tesla.com">tesla.com</a> is built on these so-called "legacy" media queries, and therefore has been the defacto standard when it comes to building pages using breakpoints.
      </td>
    </tr>
  </tfoot">
  <tbody class="table-body">
    <tr class="table-row">
      <td class=""><code class="styleguide">$mobile-only</code></td>
      <td class=""><code class="styleguide">0-639px</code></td>
      <td class="">
        <ul>
          <li>HTC One, Galaxy S3/S4/S5 (639px)</li>
          <li>iPhone 5/5S (568px)</li>
          <li>iPhone 4 (480px)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--warn tsla-alert-inline">Legacy</div></td>
    </tr>
    <tr class="table-row">
      <td class=""><code class="styleguide">$small-desktop-only</code></td>
      <td class=""><code class="styleguide">640px-940px</code></td>
      <td class="">
        <ul>
          <li>Small screens only (640px - 960px)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--warn tsla-alert-inline">Legacy</div></td>
    </tr>
    <tr class="table-row">
      <td class=""><code class="styleguide">$small-desktop</code></td>
      <td class=""><code class="styleguide">640px+</code></td>
      <td class="">
        <ul>
          <li>Small devices (640px+)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--warn tsla-alert-inline">Legacy</div></td>
    </tr>
    <tr class="table-row">
      <td class=""><code class="styleguide">$large-desktop</code></td>
      <td class=""><code class="styleguide">960px+</code></td>
      <td class="">
        <ul>
          <li>Large desktop screens (960px+)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--warn tsla-alert-inline">Legacy</div></td>
    </tr>
  </tbody>
  <tbody class="tbody">
    <tr class="table-row">
      <td class=""><code class="styleguide">$mobile-phone-only</code></td>
      <td class=""><code class="styleguide">0-736px</code></td>
      <td class="">
        <ul>
          <li>HTC One (639px)</li>
          <li>Galaxy S3/S4/S5 (639px)</li>
          <li>iPhone 5/5S (568px)</li>
          <li>iPhone 4 (480px)</li>
          <li>iPhone 6 (667px)</li>
          <li>iPhone 6+ (736px)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--info tsla-alert-inline">New</div></td>
    </tr>
    <tr class="table-row">
      <td class=""><code class="styleguide">$tablet-only</code></td>
      <td class=""><code class="styleguide">601-1280px</code></td>
      <td class="">
        <ul>
          <li>iPad (768px - 1024px)</li>
          <li>Galaxy (800px - 1280px)</li>
          <li>Nexus (601px - 906px)</li>
          <li>Kindle (800px - 1280px)</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--info tsla-alert-inline">New</div></td>
    </tr>
    <tr class="table-row">
      <td class=""><code class="styleguide">$large-devices</code></td>
      <td class=""><code class="styleguide">1200px+</code></td>
      <td class="">
        <ul>
          <li>gigantic screens?</li>
        </ul>
      </td>
      <td class="" style="text-align: center;vertical-align: middle;"><div class="particles-alert particles-alert--info tsla-alert-inline">New</div></td>
    </tr>
  </tbody>
</table>

*/
/*doc

---
title: Transitions
name: Transitions
category: Animations
---

When dealing with elements being added to the HTML DOM or taken off the DOM post-load, we may want to add animation to these transitions to make it smooth and seamless for our users.
Most popular javascript frameworks and third party packages add the following classes to indicate stages of transition:

1. `.{custom}-enter`
2. `.{custom}-enter-active`
3. `.{custom}-leave`
4. `.{custom}-leave-active`

- [ReactJS Animation](https://facebook.github.io/react/docs/animation.html)
- [AngularJS Animation](https://docs.angularjs.org/guide/animations)

## Default Animations
The default animations for Particles is created using `.enter-leave-animation-default` mixin. There are several characteristics to a default set of animations:

 1. Animated element starts off with opacity: .01,
 2. and transitions to opacity: 1 in its enter-active state with 500ms transition on all properties with no transition timing function,
 3. when leaving the DOM the element starts with opacity: 1,
 4. and transitions to opacity: .01 in its leave-active state with 300ms transition on all properties with no transition timing function.

```sass_example
@include enter-leave-animation-default(ng)
```

The above sass @include example produces the following css:

```sass_example
.ng-enter {
    opacity: .01;
}
.ng-enter.ng-enter-active {
    opacity: 1;
    -webkit-transition: opacity 500ms ease-in;
       -moz-transition: opacity 500ms ease-in;
         -o-transition: opacity 500ms ease-in;
            transition: opacity 500ms ease-in;
}
.ng-leave {
    opacity: 1;
}
.ng-leave.ng-leave-active {
    opacity: .01;
    -webkit-transition: opacity 300ms ease-in;
       -moz-transition: opacity 300ms ease-in;
         -o-transition: opacity 300ms ease-in;
            transition: opacity 300ms ease-in;
}
```

The included mixin in use:

```sass_example
@mixin enter-leave-animation-default($classname: general) {
    @include enter-animation($classname)
    @include enter-active-animation($classname, opacity, 500ms, ease-in)
    @include leave-animation($classname)
    @include leave-active-animation($classname, opacity, 300ms, ease-in)
}
```

## Custom Variations

We can customize animations for every step in 4 stages of transition by using all four mixins instead of a single general one:

```sass_example
@include enter-animation(ng)
@include enter-active-animation(ng, opacity, 500ms, ease-in)
@include leave-animation(ng)
@include leave-active-animation(ng, opacity, 300ms, ease-in)
```
The parameters passed are:

1. `$classname`  - Optional. Defaults to "general"
2. `$property`   - Optional. Defaults to "all"
3. `$duration`   - Optional. Defaults to "500ms"
4. `$function`  - Optional. Defaults to "false"

Additionally, we can customize the animation further by passing the content to the `enter-animation`, `leave-animation`, `enter-active-animation` and `leave-active-animation` mixins as follows:

```sass_example
@include enter-animation(general) {
    width: 100%;
}
@include enter-active-animation(general, width, 2s, ease-in) {
    width: 50%;
}
```

The above mixin will produce the following css:

```sass_example
.general-enter {
    width: 100%;
}
.general-enter.general-enter-active {
    width: 50%;
    -webkit-transition: width 2s ease-in;
       -moz-transition: width 2s ease-in;
         -o-transition: width 2s ease-in;
            transition: width 2s ease-in;
}
```
*/
.content-constrain .container {
  width: 100%;
  max-width: 100%;
}

@media (min-width: 0) and (max-width: 639px) {
  .content-constrain {
    padding-top: 52px;
  }
}

html {
  background-color: #fff;
}

@media (min-width: 640px) {
  html {
    min-height: 90vh;
    padding-bottom: 10vh;
  }
}

.code-example {
  position: relative;
}

.code-example pre {
  font-family: "Menlo", "Monaco", "Courier New", monospace;
  font-size: 16px;
}

hr {
  height: 1px;
  border: 0;
  background-color: rgba(0, 0, 0, 0.5);
  margin: 40px 0;
}

.styleguide-content h1,
.styleguide-content h2,
.styleguide-content h3,
.styleguide-content h4,
.styleguide-content h5,
.styleguide-content h6 {
  line-height: 1.25;
}

.styleguide-content p,
.styleguide-content li {
  line-height: 1.5;
}

.styleguide-content li.styleguide {
  margin-bottom: 15px;
}

.styleguide-content h1.styleguide {
  margin-bottom: 10px;
  font-size: 30px;
  text-transform: capitalize;
}

@media (min-width: 0) and (max-width: 639px) {
  .styleguide-content h1.styleguide {
    margin-top: 20px;
  }
}

@media (min-width: 640px) {
  .styleguide-content h1.styleguide {
    margin-top: 60px;
  }
}

.styleguide-content h2.styleguide {
  margin-bottom: 5px;
}

@media (min-width: 0) and (max-width: 639px) {
  .styleguide-content h2.styleguide {
    margin-top: 20px;
  }
}

@media (min-width: 640px) {
  .styleguide-content h2.styleguide {
    margin-top: 40px;
  }
}

.styleguide-content ol.styleguide,
.styleguide-content ul.styleguide {
  font-size: 18px;
  color: #666;
  margin-left: 20px;
  margin-bottom: 20px;
}

.styleguide-content p {
  font-size: 18px;
}

.styleguide-content p.styleguide {
  margin-top: 0;
}

.styleguide-content p.styleguide + ol.styleguide,
.styleguide-content p.styleguide + ul.styleguide {
  margin-top: -20px;
}

blockquote .styleguide-content p {
  display: inline-block;
}

.styleguide-content ul.styleguide li {
  list-style: disc;
}

.styleguide-content ol.styleguide li {
  list-style: decimal;
}

.styleguide-content code {
  font-family: "Menlo", "Monaco", "Courier New", monospace;
  font-size: 14px;
  position: relative;
  background-color: #f2f2f2;
  padding: 3px;
  border-radius: 3px;
}

.styleguide-content table.styleguide tbody tr:nth-child(even) td {
  background-color: #f7f7f7;
}

@media (min-width: 640px) {
  .styleguide-content table.styleguide tbody tr > td:first-child {
    white-space: nowrap;
  }
}

.styleguide-content table.styleguide tbody tr:first-child th {
  vertical-align: bottom;
  font-family: 'Gotham Bold';
}

.styleguide-content table.styleguide th,
.styleguide-content table.styleguide td {
  padding: 10px;
}

.styleguide-content table.styleguide th {
  border-bottom: 1px solid #ccc;
}

.styleguide-content table.styleguide td {
  vertical-align: top;
}

@media (min-width: 640px) {
  .styleguide-content {
    max-width: 1060px;
    width: calc(70% - 30px);
    float: left;
    position: relative;
    z-index: 10000;
  }
  .styleguide-content blockquote {
    border-left: 1px solid #333;
  }
  .styleguide-aside {
    width: 100%;
    position: fixed;
    right: 0;
    top: 0;
  }
  .content-constrain {
    max-width: 1440px;
    background-color: transparent;
  }
  .styleguide-aside--nav_container {
    padding: 28px 30px 30px;
    width: calc(20% + 30px);
    float: right;
    height: 100vh;
    overflow: scroll;
  }
  .styleguide-aside--nav_container .section-subtitle {
    padding-bottom: 20px;
  }
}

@media (min-width: 0) and (max-width: 639px) {
  .styleguide-content,
  .styleguide-aside {
    display: block;
    float: none;
    width: 100%;
  }
}

.code-block {
  margin: 16px 0;
  position: relative;
  overflow: hidden;
  border: 1px solid #ccc;
  box-shadow: inset 0 0 10px #ddd;
  background-color: #fafafa;
  border-radius: 2px;
}

.code-block .highlight {
  padding: 30px 10px 10px;
}

.code-block:hover {
  opacity: 1;
  cursor: pointer;
  transition: opacity 150ms linear;
}

.code-block::before,
.code-block [class*='icon-arrow-'] {
  font-family: "HeiS ASC Simplified Chinese", "HeiS ASC Simplified Chinese_n5", "HeiT ASC Traditional Chinese", "HelveticaNeue-Regular", "Helvetica Neue Regular", "Helvetica Neue", Helvetica, Arial, sans-serif;
  padding: 6px 10px 5px;
  font-size: 10px;
  min-width: 70px;
  box-shadow: 0 0 10px #ddd;
  top: 0;
  display: block;
  position: absolute;
  text-align: left;
  background-color: #fff;
  border-bottom: 1px solid #ccc;
  color: #444;
}

.code-block::before {
  font-family: "Menlo", "Monaco", "Courier New", monospace;
  left: 0;
  border-right: 1px solid #ccc;
  border-radius: 3px 0;
}

.code-block.is-collapsed {
  padding-top: 13px;
  padding-bottom: 10px;
  opacity: .5;
  transition: opacity 150ms linear;
}

.code-block.is-collapsed:hover {
  opacity: 1;
  transition: opacity 150ms linear;
}

.code-block.is-collapsed::before {
  border-radius: 2px 0 0 2px;
}

.code-block.is-collapsed [class*='icon-arrow'] {
  border-radius: 0 2px 2px 0;
}

.code-block.is-collapsed .highlight {
  display: none;
}

.code-block code {
  background-color: transparent;
  line-height: 1.45;
  padding: 0;
}

.code-block [class*='icon-arrow'] {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  right: 0;
  border-left: 1px solid #ccc;
  border-radius: 0 3px;
  cursor: pointer;
  display: block;
  min-width: 32px;
}

.code-block--css::before {
  content: 'CSS';
}

.code-block--sass::before {
  content: 'Sass';
}

.code-block--html::before {
  content: 'HTML';
}

.code-block--javascript::before {
  content: 'Javascript';
}

.code-block--shell::before {
  content: 'Shell';
}

.code-output .tsla-flex_grid--item .styleguide-demo {
  width: 100%;
  padding: 10px;
  padding-bottom: 0;
  border: 1px solid rgba(88, 77, 65, 0.1);
  text-align: center;
  background-color: rgba(147, 128, 108, 0.1);
}

.code-output .tsla-flex_grid--item .styleguide-demo::after {
  content: '\00a0';
  display: block;
  margin-top: 10px;
  height: 0;
  visibility: hidden;
}

.code-output [class*='tsla-scrim--'] .styleguide-demo {
  padding: 10px;
}

.styleguide-nav {
  margin-bottom: 32px;
}

.section-nav {
  margin-bottom: 20px;
}

.section-nav li {
  list-style-type: disc;
  margin-left: 20px;
}

.tsla-prevent-scroll .content-constrain {
  z-index: 1;
}

html {
  color: inherit;
}

.content-constrain {
  background-color: #fff;
}

@media (min-width: 640px) {
  .content-constrain {
    padding-top: 46px;
  }
}

header .container {
  background-color: transparent;
}

.section-intro .section-title {
  text-transform: uppercase;
}

.section-intro .section-title code {
  font-family: "Menlo", "Monaco", "Courier New", monospace;
  text-transform: lowercase;
  font-weight: 100;
  color: #333;
}

.list-links li {
  margin-bottom: 0;
}

.tsla-footer-centered + .tsla-footer-centered {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column nowrap;
          flex-flow: column nowrap;
}

.tsla-footer-centered + .tsla-footer-centered .tsla-footer-meta {
  padding: 0;
}

.tsla-footer-centered + .tsla-footer-centered .tsla-footer-meta + .tsla-footer-meta {
  padding-top: 0;
}
