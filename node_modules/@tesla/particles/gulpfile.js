/*******************************************************************************
 * DEPENDENCIES
 * *****************************************************************************/
var fs = require('fs'),
  path = require('path'),
  gulp = require('gulp'), // gulp core
  sass = require('gulp-sass'), // sass compiler
  shell = require('gulp-shell'), // run shell commands
  notify = require('gulp-notify'), // send notifications to osx
  plumber = require('gulp-plumber'), // disable interuption
  sourcemaps = require('gulp-sourcemaps'), // sass sourcemaps
  autoprefixer = require('gulp-autoprefixer'), // Autoprefix vendor prefixes
  livereload = require('gulp-livereload'), // reload on changes
  replace = require('gulp-replace'),
  cleanCSS = require('gulp-clean-css'),
  rename = require('gulp-rename'), // for minification
  browserSync = require('browser-sync').create(), // keep yo browsers 'nsync
  notifier_icon = path.join(__dirname, 'assets/img/icons/apple-touch-icon-152x152.png'),
  del = require('del'), // cleaning/removing files and folders
  hologram = require('gulp-hologram'),
  packageJSON = require('./package.json');


/*******************************************************************************
 * FILE DESTINATIONS (RELATIVE TO ROOT OF INSTALL)
 * *****************************************************************************/
target = {
  particles_sass_src: './scss/**/*.scss',
  particles_css_dest: './css',

  styleguide_sass_src: './styleguide_assets/scss/**/*.scss',
  styleguide_css_dest: './styleguide_assets/css/',

  version_file_src: './styleguide_assets/version.js',
  version_file_dest: './styleguide_assets'
};


/*******************************************************************************
 * TASK: Compile, Particles Sass files
 * *****************************************************************************/
gulp.task('compile:particles', function () {

  var onError = function (error) {
    var lineNumber = (error.line) ? 'LINE ' + error.line + ' -- ' : '';

    notify({
      title: 'Particles',
      subtitle: 'Your Task Failed [' + error.plugin + ']',
      message: lineNumber + 'See console.',
      icon: notifier_icon,
      sound: 'Sosumi'
    }).write(error);

    // DO NOT REMOVE
    // this will log the error to the terminal window as well
    console.log(error);

    this.emit('end');
  };

  gulp.src(target.particles_sass_src)
    .pipe(plumber({ // keep running on errors
      errorHandler: onError
    }))

    .pipe(sourcemaps.init()) // initialize sourcemaps

    .pipe(sass({ // compile all sass :allthethings:
      style: 'compressed',
      debugInfo: true,
      lineNumbers: true,
      errLogToConsole: true
    }))

    .pipe(sourcemaps.write(undefined, { sourceRoot: null })) // write the sourcemaps

    .pipe(autoprefixer())

    .pipe(gulp.dest(target.particles_css_dest)) // where to put the file

    .pipe(livereload())

    .pipe(browserSync.stream())

    // Let's minify Particles
    .pipe(sass({
      errLogToConsole: true,
      outputStyle: 'compressed'
    }))
    .pipe(cleanCSS({
      keepSpecialComments: '*',
      spaceAfterClosingBrace: true
    }))
    .pipe(rename({ suffix: '.min' }))
    .pipe(gulp.dest(target.particles_css_dest)) // where to put the file

});

/*******************************************************************************
 * TASK: Generate documentation using Hologram
 * *****************************************************************************/
gulp.task('generate:docs', function () {
  gulp.src('hologram_config.yml')
    .pipe(hologram());
});


/*******************************************************************************
 * TASK: compile:styleguide Sass files
 * *****************************************************************************/
gulp.task('compile:styleguide', function () {
  gulp.src(target.styleguide_sass_src)
    .pipe(sass({
      errLogToConsole: true,
      outputStyle: 'expanded'
    }))
    .pipe(autoprefixer())
    .pipe(gulp.dest(target.styleguide_css_dest))
    .pipe(livereload())
});


/*******************************************************************************
 * TASK: create a version file for usage on the site
 *  -- Creates both version.js and version.compiled.js to insert version number in footer
 *  -- Creates _app-version.scss for usages in Sass files
 * *****************************************************************************/
gulp.task('create:version', function (cb) {
  gulp.src(target.version_file_src)
    .pipe(replace('%PARTICLES_VERSION%', packageJSON.version))
    .pipe(rename(function (path) {
      path.basename += ".compiled";
    }))
    .pipe(gulp.dest(target.version_file_dest))

    fs.writeFile('./scss/_app-version.scss', '$app-version: \'' + packageJSON.version + '\';\n', cb);
})


/*******************************************************************************
 * TASK: watching Particles Sass files for changes
 * *****************************************************************************/
gulp.task('watch:particles', function () {
  livereload.listen()
  gulp.watch(target.styleguide_sass_src, ['compile:styleguide'])
  gulp.watch(target.particles_sass_src, ['compile:particles', 'generate:docs'])
});


/*******************************************************************************
 * TASK: watching styleguide Sass folder for changes
 * *****************************************************************************/
gulp.task('watch:styleguide', function () {
  livereload.listen()
  gulp.watch(target.styleguide_sass_src, ['compile:styleguide'])
});


/*******************************************************************************
 * TASK: cleaning compiled css files
 * *****************************************************************************/
gulp.task('cleanup', function () {
  return del([
    path.join(target.particles_css_dest, '/**/*.css'),
    path.join(target.styleguide_css_dest, '/**/*.css')
  ]);
});


/*******************************************************************************
 * TASK: Compile, Version, watch:particles and Styleguide for Developers and for Production
 * *****************************************************************************/
gulp.task('default', ['create:version', 'compile:particles', 'compile:styleguide', 'watch:particles', 'watch:styleguide', 'generate:docs'], function () {
  browserSync.init({
    server: "./"
  });
});


