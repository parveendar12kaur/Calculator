'use strict';

module.exports = {
    getOptionList: getOptionList,
    getAllPossibleConfiguration: getAllPossibleConfiguration,
    getSubTotal: getSubTotal,
    getMarketingConfiguration: getMarketingConfiguration,
    getManufacturingConfiguration: getManufacturingConfiguration
};

var PLACE_HOLDER = 'ALL_POSSIBLE_CONFIGURATION_OPTIONAL_OPTION_CODE_OFF_PLACE_HOLDER';

function getOptionList(configuration) {
    return configuration.options ? configuration.options.map(function (option) {
        return option.code;
    }) : [];
}

function getAllPossibleConfiguration(lexicon) {
    var optionsMatrixObject = transformLexiconForAllPossibleConfigurations(lexicon);
    return getAllPossibleOptionList(optionsMatrixObject);
}

/* eslint-disable no-plusplus */
/* eslint-disable no-unused-vars */
// Algorithm to handle the combination of 2D array with different row size
function getAllPossibleOptionList(_ref) {
    var optionsMatrix = _ref.optionsMatrix,
        iterationMatrix = _ref.iterationMatrix,
        iterationCursor = _ref.iterationCursor,
        iterationLength = _ref.iterationLength;

    var optionList = [];
    for (var i = 0; i < iterationLength; i++) {
        var emptyList = optionsMatrix.map(function (item) {
            return 0;
        });
        var emptyListLength = optionsMatrix.length;
        for (var j = 0; j < emptyListLength; j++) {
            emptyList[j] = optionsMatrix[j][iterationCursor[j]];
        }
        emptyList = emptyList.filter(function (item) {
            return item !== PLACE_HOLDER;
        });
        iterationCursor[0]++;
        for (var k = 0; k < emptyListLength - 1; k++) {
            if (iterationCursor[k] === iterationMatrix[k]) {
                iterationCursor[k] = 0;
                iterationCursor[k + 1]++;
            }
        }
        optionList.push(emptyList);
    }
    return optionList;
}

// Abstraction, transform group/options to a 2D array mathmatical model
function transformLexiconForAllPossibleConfigurations(lexicon) {
    var optionsMatrix = [];
    var iterationMatrix = [];
    var iterationCursor = [];
    var iterationLength = 1;
    var transformedGroups = lexicon.groups.reduce(function (groups, group) {
        if (group.required && group.exclusive) {
            groups.push({ options: group.options.slice() });
        } else if (!group.required && group.exclusive) {
            var groupOptions = [];
            group.options.forEach(function (option) {
                groupOptions.push(PLACE_HOLDER);
                groupOptions.push(option);
            });
            groups.push({ options: groupOptions });
        } else if (!group.required && !group.exclusive) {
            group.options.forEach(function (option) {
                groups.push({ options: [option, PLACE_HOLDER] });
            });
        } else {
            group.options.forEach(function (option) {
                groups.push({ options: [option] });
            });
        }
        return groups;
    }, []);

    transformedGroups.forEach(function (group) {
        var groupOptions = group.options;
        var groupOptionsLength = groupOptions.length;
        iterationMatrix.push(groupOptionsLength);
        iterationLength *= groupOptionsLength;
        optionsMatrix.push(groupOptions);
        iterationCursor.push(0);
    });
    return {
        optionsMatrix: optionsMatrix,
        iterationMatrix: iterationMatrix,
        iterationCursor: iterationCursor,
        iterationLength: iterationLength
    };
}

function getMarketingConfiguration() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var lexicon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var optionsObject = options.filter(function (option) {
        return !!lexicon.options[option];
    }).map(function (option) {
        return {
            code: option,
            price: lexicon.options[option].price,
            group: lexicon.options[option].group
        };
    });
    return {
        market: lexicon.market,
        model: lexicon.product,
        language: lexicon.language,
        effective_date: lexicon.effective_date,
        options: optionsObject,
        sub_total: getSubTotal(options, lexicon)
    };
}

function getManufacturingConfiguration() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var lexicon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var optionsObject = options.filter(function (option) {
        return !!lexicon.options[option];
    }).map(function (option) {
        return {
            code: option,
            group: lexicon.options[option].group
        };
    });
    return {
        market: lexicon.market,
        model: lexicon.product,
        language: lexicon.language,
        effective_date: lexicon.effective_date,
        options: optionsObject
    };
}

/* eslint-disable no-param-reassign */
function getSubTotal() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var lexicon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!lexicon.options) {
        return 'Something wrong with the lexicon you given, we can\'t get the total price';
    }
    return options.reduce(function (sum, option) {
        if (lexicon.options[option]) {
            sum += parseInt(lexicon.options[option].price, 10) || 0;
        }
        return sum;
    }, 0);
}