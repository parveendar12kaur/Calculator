const path = require('path');
const chai = require('chai');
const Axios = require('axios');
const AxiosMockAdapter = require('axios-mock-adapter');

const ENV = require(path.resolve(__dirname, '../../dist/env'));
const utils = require(path.resolve(__dirname, '../../dist/utils'));
const TYPES = require(path.resolve(__dirname, '../../dist/utils/types'));

const expect = chai.expect;
const MARKETING_LEXICON_DATA = require(path.resolve(__dirname, '../fixtures/marketingLexicon.json'));

describe('Utils', () => {

    describe('httpGetObservable$ method ', () => {
        it('should fetch HTTP response correctly', (done) => {
            var mock = new AxiosMockAdapter(Axios);
            mock.onGet(ENV.MARKETING_LEXICON).reply(200, MARKETING_LEXICON_DATA);
            utils.httpGetObservable$(ENV.MARKETING_LEXICON)
              .subscribe(
                    response => {
                        expect(JSON.stringify(response)).to.equal(JSON.stringify(MARKETING_LEXICON_DATA));
                        done();
                    }
                )

            mock.restore();
        });

        it('should catch the exception when service is down  [no service stub]', (done) => {
            utils.httpGetObservable$('http://SERVICE_DOWN')
              .subscribe(
                    response => {
                        expect(response).to.equal(TYPES.EXCEPTION_HTTP_REQUEST);
                        done();
                    },
                    error => {
                        done();  
                    }
                );
        });
    });
});