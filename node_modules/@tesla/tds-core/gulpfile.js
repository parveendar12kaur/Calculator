/*******************************************************************************
1. DEPENDENCIES
*******************************************************************************/
var gulp = require('gulp'), // gulp core
  postcss = require('gulp-postcss'), // postcss
  notify = require('gulp-notify'), // send notifications to osx
  plumber = require('gulp-plumber'), // disable interuption
  sourcemaps = require('gulp-sourcemaps'), // css sourcemaps
  livereload = require('gulp-livereload'), // reload on changes
  autoprefixer = require('gulp-autoprefixer'), // Autoprefix vendor prefixes
  browserSync = require('browser-sync').create(), // keep yo browsers 'nsync
  replace = require('gulp-replace'), // replace strings
  packageJSON = require('./package.json'); // get version number
// don't have one yet, but when we do...
// notifier_icon = path.join(__dirname, 'some-image.png');


/*******************************************************************************
2. FILE DESTINATIONS (RELATIVE TO ROOT OF INSTALL)
*******************************************************************************/
var target = {
  js_src: './src/assets/js/**/*.js',
  css_src: './src/assets/css/**/*.css',
  html_src: './src/**/*.html',
  img_src: './src/assets/img/**/*',

  js_dest: './dest/assets/js',
  css_dest: './dest/assets/css',
  html_dest: './dest',
  img_dest: './dest/assets/img',
};


/*******************************************************************************
3. COMPILE SASS + HTML TASKS
*******************************************************************************/
gulp.task('compile:css', function () {
  gulp.src(target.css_src)

    .pipe(sourcemaps.init())

    .pipe(autoprefixer())

    .pipe(postcss())

    .pipe(sourcemaps.write())

    .pipe(gulp.dest(target.css_dest, ['reload:browsers']));

  browserSync.reload();

});

gulp.task('lint:css', function lintCssTask() {
  var gulpStylelint = require('gulp-stylelint');

  return gulp
    .src(target.css_src)
    .pipe(gulpStylelint({
      failAfterError: false,
      reportOutputDir: 'linters',
      reporters: [{
        formatter: 'string',
        save: 'stylelint.txt',
        console: true
      }]
    }));
});

// watch CSS folder for changes
gulp.task('watch:css', function () {
  livereload.listen();
  gulp.watch(target.css_src, ['compile:css', 'lint:css']);
});

// watch JS folder for changes
gulp.task('watch:js', function () {
  livereload.listen();
  gulp.watch(target.js_src, ['compile:js']);
});

gulp.task('watch:html', function () {
  livereload.listen();
  gulp.watch(target.html_src, ['compile:html']);
});

gulp.task('compile:js', function () {
  gulp.src(target.js_src)
    .pipe(gulp.dest(target.js_dest, ['reload:browsers']));
  browserSync.reload();
});

gulp.task('compile:html', function () {
  gulp.src(target.html_src)
    .pipe(replace('%version%', packageJSON.version))
    .pipe(gulp.dest(target.html_dest, ['reload:browsers']));
  browserSync.reload();
});

gulp.task('copy:images', function () {
  gulp.src(target.img_src)
    .pipe(gulp.dest(target.img_dest));
  browserSync.reload();
});

gulp.task('reload:browsers', function () {
  browserSync.reload();
});

// compile things for Developer environments
gulp.task('build', ['compile:js','compile:css','compile:html','copy:images',]);


// compile things for Developer environments
gulp.task('default',
[
  'watch:js',
  'watch:css',
  'watch:html',

  'compile:js',
  'compile:css',
  'compile:html',

  'copy:images',
  'lint:css',
  'reload:browsers'
], function () {
  browserSync.init({
    port: 8081,
    server: "./dest"
  });
});
