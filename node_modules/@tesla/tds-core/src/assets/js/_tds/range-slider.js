const sliders = document.querySelectorAll('.tsla-range_slider');

// Calculate percentage value based on min,max and value
// This is used to set width for the active progress
function getProgressValue(min, max, value) {
  const range = max - min;
  return (Math.round(value - min) / range) * 100;
}

// Common function to set range slider background color width and progress value output.
function setCurrentTrackBarProgressAndWidth(sliderTracker, sliderProgressOutput, min, max, value) {
  const trackResult = Number.parseFloat(getProgressValue(min, max, value)).toFixed(1);

  sliderTracker.style.setProperty('--tsla-range-slider_track_active_progress', `${trackResult}%`);
  sliderTracker.style.setProperty('--tsla-range_slider-progress-display', 'block');
  sliderProgressOutput.innerHTML = `$${value} ( ${trackResult}% )`;
}

// On DOM initialization
function loadDefaultValues(currentSlider, currentProgressOutput) {
  setCurrentTrackBarProgressAndWidth(currentSlider, currentProgressOutput, currentSlider.min, currentSlider.max, currentSlider.value);
}

// On initial load loop through all the sliders in that dom to make all the sliders to work independently
for (let i = 0; i < sliders.length; i++) {
  const currentRangeTrackerInput = sliders[i].querySelector('.tsla-input-range');
  const currentSliderProgressOutput = sliders[i].querySelector('.tsla-range_slider_progress_value');

  loadDefaultValues(currentRangeTrackerInput, currentSliderProgressOutput);

  currentRangeTrackerInput.addEventListener('input', function trackerPosition() {
    setCurrentTrackBarProgressAndWidth(currentRangeTrackerInput, currentSliderProgressOutput, this.min, this.max, this.value);
  });
}
