#!groovy*

def credsID = "82d804b6-1fc8-4ff2-b455-bf80d870ed42"
def repoURL = "https://sa-mytbuilduser@stash.teslamotors.com/scm/particles/tds-core.git"

pipeline {
  agent {
    node {
      label 'docker && linux'
    }
  }

  options {
    buildDiscarder(logRotator(daysToKeepStr: '4'))
    sendSplunkConsoleLog()
  }

  parameters {
    string(defaultValue: "$BRANCH_NAME",
            description: "BUTTON_TRIGGER_TITLE",
            name: "BUTTON_TRIGGER_TITLE")
    string(defaultValue: "$BRANCH_NAME",
            description: 'Which branch(es) to build for the app',
            name: 'app_branch_name')
    string(name: 'PULL_REQUEST_TO_HTTP_CLONE_URL',
            description: 'PULL_REQUEST_TO_HTTP_CLONE_URL',
            defaultValue: "PULL_REQUEST_TO_HTTP_CLONE_URL")
    string(name: 'PULL_REQUEST_TO_HASH',
            description: 'PULL_REQUEST_TO_HASH',
            defaultValue: "PULL_REQUEST_TO_HASH")
    string(name: 'PULL_REQUEST_FROM_HTTP_CLONE_URL',
            description: 'PULL_REQUEST_FROM_HTTP_CLONE_URL',
            defaultValue: "PULL_REQUEST_FROM_HTTP_CLONE_URL")
    string(name: 'PULL_REQUEST_FROM_HASH',
            description: 'PULL_REQUEST_FROM_HASH',
            defaultValue: "PULL_REQUEST_FROM_HASH")
    string(name: 'PULL_REQUEST_TO_REPO_PROJECT_KEY',
            description: 'PULL_REQUEST_TO_REPO_PROJECT_KEY',
            defaultValue: "PULL_REQUEST_TO_REPO_PROJECT_KEY")
    string(name: 'PULL_REQUEST_TO_REPO_SLUG',
            description: 'PULL_REQUEST_TO_REPO_SLUG',
            defaultValue: "PULL_REQUEST_TO_REPO_SLUG")
    string(name: 'PULL_REQUEST_TO_REPO_NAME',
            description: 'PULL_REQUEST_TO_REPO_NAME',
            defaultValue: "PULL_REQUEST_TO_REPO_NAME")
    string(name: 'PULL_REQUEST_TO_BRANCH',
            description: 'PULL_REQUEST_TO_BRANCH',
            defaultValue: "PULL_REQUEST_TO_BRANCH")
    string(name: 'PULL_REQUEST_AUTHOR_NAME',
            description: 'PULL_REQUEST_AUTHOR_NAME',
            defaultValue: "PULL_REQUEST_AUTHOR_NAME")
    string(name: 'PULL_REQUEST_AUTHOR_EMAIL',
            description: 'PULL_REQUEST_AUTHOR_EMAIL',
            defaultValue: "PULL_REQUEST_AUTHOR_EMAIL")
    string(name: 'PULL_REQUEST_MERGE_COMMIT',
            description: 'PULL_REQUEST_MERGE_COMMIT',
            defaultValue: "PULL_REQUEST_MERGE_COMMIT")
    string(name: 'PULL_REQUEST_TITLE',
            description: 'PULL_REQUEST_TITLE',
            defaultValue: "PULL_REQUEST_TITLE")
    string(name: 'PULL_REQUEST_URL',
            description: 'PULL_REQUEST_URL',
            defaultValue: "PULL_REQUEST_URL")

  }

  triggers {
    pollSCM(
            scmpoll_spec: "",
            ignorePostCommitHooks: false
    )

    // bitbucketpr(
    //         projectPath: "$repoURL",
    //         ciSkipPhrases: "no-ci",
    //         ciName: "jenkins",
    //         username: "",
    //         repositoryName: "",
    //         branchesFilter: "",
    //         ciKey: "Jenkins",
    //         approveIfSuccess: false,
    //         cancelOutdatedJobs: true
    // )
  }

  stages {
    stage('Pre-build') {
      steps {
        sh 'printenv'
      }
    }

    stage('Pull SCM') {
      steps {
        checkout([
                $class                           : 'GitSCM',
                branches                         : [[name: "origin/${params.app_branch_name}"]],
                doGenerateSubmoduleConfigurations: false,
                gitTool                          : 'Auto (git)',
                submoduleCfg                     : [],
                userRemoteConfigs                : [[
                                                            credentialsId: "$credsID",
                                                            url          : "$repoURL"
                                                    ]]
        ])
      }
    }

    stage('Run: Build') {
      steps {
        sh """
        rm -rf dest
        npm install
		    ~/bin/gulp build
        """
        script {
          env.app_branch_name = params.app_branch_name
        }
      }
    }

    stage('Deploy branch: stage') {

      when { expression { return env.app_branch_name =~ /^stage/ || (env.GIT_BRANCH && env.GIT_BRANCH =~ /^stage/) } }

      steps {
        script {
          env.app_branch_name = params.app_branch_name
          env.app_branch_name = env.app_branch_name.replaceAll('/', '_').replaceAll(':', "__")
        }

        sh """
        rm -rf build-${env.app_branch_name}-${BUILD_NUMBER}
        mv dest build-${env.app_branch_name}-${BUILD_NUMBER}
        """

        script {
          sh "scp -r build-${env.app_branch_name}-${BUILD_NUMBER} sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com:~"
          sh 'ssh sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com "sudo rm -rf /var/www/vhosts/design.tesla.com/*"'
          sh "ssh sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com \"sudo mv ~/build-${env.app_branch_name}-${BUILD_NUMBER}/* /var/www/vhosts/design.tesla.com/\""
        }

      }
    }

    stage('Deploy branch: master') {
      when { expression { return env.app_branch_name =~ /^master/ || (env.GIT_BRANCH && env.GIT_BRANCH =~ /^master/) } }

      steps {
        script {
          env.app_branch_name = params.app_branch_name
          env.app_branch_name = env.app_branch_name.replaceAll('/', '_').replaceAll(':', "__")
        }

        sh """
        rm -rf build-${env.app_branch_name}-${BUILD_NUMBER}
        mv dest build-${env.app_branch_name}-${BUILD_NUMBER}
        """

        script {
          sh "scp -r build-${env.app_branch_name}-${BUILD_NUMBER} sa-mytbuilduser@scj04p1ptcwb01.teslamotors.com:~"
          sh 'ssh sa-mytbuilduser@scj04p1ptcwb01.teslamotors.com "sudo rm -rf /var/www/vhosts/design.tesla.com/*"'
          sh "ssh sa-mytbuilduser@scj04p1ptcwb01.teslamotors.com \"sudo mv ~/build-${env.app_branch_name}-${BUILD_NUMBER}/* /var/www/vhosts/design.tesla.com/\""
        }
      }
    }

    stage('Deploy branch: build') {
      when { expression { return env.app_branch_name =~ /build/ || (env.GIT_BRANCH && env.GIT_BRANCH =~ /build/) } }

      steps {
        script {
          env.app_branch_name = params.app_branch_name
          env.app_branch_name = env.app_branch_name.replaceAll('/', '_').replaceAll(':', "__")
        }

        sh """
        rm -rf build-${env.app_branch_name}-${BUILD_NUMBER}
        mv dest build-${env.app_branch_name}-${BUILD_NUMBER}
        """

        script {
          sh "scp -r build-${env.app_branch_name}-${BUILD_NUMBER} sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com:~"
          sh 'ssh sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com "sudo rm -rf /var/www/vhosts/design.tesla.com/*"'
          sh "ssh sa-mytbuilduser@sjc04s1ptcwb01.teslamotors.com \"sudo mv ~/build-${env.app_branch_name}-${BUILD_NUMBER}/* /var/www/vhosts/design.tesla.com/\""
        }
      }
    }
  }
}
