// Mixins
// ------------------------------------------------------------------------
//
// Sample Usage
// ------------------------------------------------------------------------
// .someclass {
//     @include mixin-name;
// }
@import 'functions';

@mixin no-select {
  user-select: none;
}

@mixin fade-out($transition-property: opacity, $transition-duration: .5s, $transition-timing-function: linear) {
  transition: $transition-property $transition-duration $transition-timing-function;
  opacity: 0;
}

@mixin fade-in($transition-property: opacity, $transition-duration: .5s, $transition-timing-function: linear) {
  transition: $transition-property $transition-duration $transition-timing-function;
  opacity: 1;
}

@mixin opacity($trans) {
  opacity: $trans;
}

@mixin placeholder {
  &:focus {
    outline: 0 none;
  }

  &::-webkit-input-placeholder {
    @content;
  }

  &::-ms-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &::placeholder {
    @content;
  }

  &.placeholder {
    @content;
  }
}

@mixin clearfix {
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}

@mixin reset-container {
  max-width: initial;
  padding-left: 0;
  padding-right: 0;
  margin-left: 0;
  margin-right: 0;
}

@mixin divider {
  padding-top: 20px;
  margin-bottom: 30px;
  content: ' ';
  display: block;
  border-bottom: 1px solid $border-content;
}

// This is used to make a link at the end of a paragraph, blog post, etc
@mixin list-link {
  @include fontstack-primary;
  margin-bottom: 20px;
  font-size: 15px;
  line-height: 21px;
  clear: both;
  cursor: pointer;
  color: $tesla-primary;

  a {
    color: $tesla-primary;

    &:hover {
      color: $tesla-active;
    }
  }

  &:hover {
    color: $tesla-active;
  }
}

@mixin related-posts {
  .pane-title,
  .section-subtitle {
    @include gotham-book;
    margin-bottom: 31px;
    padding-bottom: 10px;
    font-size: 18px;
    line-height: 20px;
    color: $grey-9;
    border-bottom: 1px solid $grey-c;
  }

  .post {
    padding-bottom: 20px;
    margin-bottom: 30px;
    border-bottom: 1px solid $border-content;
    overflow: hidden;

    &:last-child {
      margin-bottom: 0;
      padding-bottom: 0;
      border: 0;
    }
  }

  .post-link {
    @include gotham-medium;
    font-size: 15px;
    line-height: 16px;
    margin-bottom: 6px;
    display: block;
    color: $black;
  }

  .post-media {
    margin-left: 5px;
    float: right;
    width: 110px;
  }

  .post-info {
    color: $grey-9;
    margin: 0;
  }

  @include susy-breakpoint($mobile-only) {
    display: none;
  }
}

@mixin rounded-element {
  border-radius: 100px;
}

// DEFAULT font-size FUNCTION
// Add font-size properties in px only.
// Use this function as a default font-size parameter that will use global line height.
// Accepts: (px)
// http://rubular.com/r/r24yCyLtvj -> regex to find all instances
@mixin fontsize-rem($size) {
  @warn 'The `fontsize-rem()` mixin will be deprecated in version 2.8.0.';
  font-size: $size;
  //font-size: calculateRem($size);
}

// Add font size params if you are required to set specific line height.
// The same as defaut font-size function the only exception added here is calculated line-height in REM units (based on given px units values).
// Accepts: (px,px)
// http://rubular.com/r/g7F6M4xhpy -> regex to find all instances
@mixin fontParams($size, $lh) {
  @warn 'The `fontParams()` mixin will be deprecated in version 2.8.0.';
  font-size: $size;
  line-height: $lh;
  //font-size: calculateRem($size);
  //line-height: calculateRem($lh);
}

// a small mixin for easy use of rem with px as fallback
// usage: font-size: 14px)
// usage: margin: 0 12px 2 1.2)
// usage: padding: 1.5 24px)
//
// thanks to Eric Meyer for https://github.com/ericam/susy
// and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/

@mixin scale($property, $values) {
  @warn 'The `scale()` mixin will be deprecated in version 2.8.0.';
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  //$rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      // $rem-values: join($rem-values, 0);

    } @else if type-of($value) == string {

      $px-values: join($px-values, auto);
      // $rem-values: join($rem-values, auto);

    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      // $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      // $rem-values: join($rem-values, #{$new-rem-value}rem);

    } @else {

      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      // $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  // #{$property}: $rem-values;
}

@mixin english-locales {
  .#{$locale-australia} &,
  .#{$locale-hongkong} &,
  .#{$locale-macau} &,
  .#{$locale-great_britain} &,
  .#{$locale-other_europe} &,
  .#{$locale-canada_english} &,
  .#{$locale_us} & {
    @content;
  }
}

@mixin apac-locales {
  .#{$locale-australia} &,
  .#{$locale-japan} &,
  .#{$locale-china} &,
  .#{$locale-hongkong} &,
  .#{$locale-hongkong_chinese} &,
  .#{$locale-macau} &,
  .#{$locale-macau_chinese} &,
  .#{$locale-jordan_english} & {
    @content;
  }
}

@mixin nonenglish-locales {
  .#{$locale-belgium_french} &,
  .#{$locale-belgium_dutch} &,
  .#{$locale-denmark} &,
  .#{$locale-germany} &,
  .#{$locale-france} &,
  .#{$locale-italy} &,
  .#{$locale-netherlands} &,
  .#{$locale-norway} &,
  .#{$locale-austria} &,
  .#{$locale-switzerland_german} &,
  .#{$locale-switzerland_french} &,
  .#{$locale-switzerland_italian} &,
  .#{$locale-sweden} &,
  .#{$locale-canada_french} &,
  .#{$locale-china} &,
  .#{$locale-japan} &,
  .#{$locale-jordan_arabic} & {
    @content;
  }
}

@mixin rtl-locales {
  .#{$locale-jordan_arabic} & {
    @content;
  }

}

// Usage:
// .your-class-name { @include show-for-region(reeu); }
// ------------------------------------------------------------------------
@mixin show-for-region($region) {
  @if $region == reeu {
    display: none;

    .#{$region-eu} & {
      display: inherit;
    }
  } @else if $region == rena {
    display: none;

    .#{$region-na} & {
      display: inherit;
    }
  } @else if $region == apac {
    display: none;

    .#{$region-apac} & {
      display: inherit;
    }
  } @else if $region == me {
    display: none;

    .#{$region-me} & {
      display: inherit;
    }
  }
}

// Usage:
// .your-class-name { @include hide-for-region(reeu); }
// ------------------------------------------------------------------------
@mixin hide-for-region($region) {
  @if $region == reeu {
    display: inherit;

    .#{$region-eu} & {
      display: none;
    }
  } @else if $region == rena {
    display: inherit;

    .#{$region-na} & {
      display: none;
    }
  } @else if $region == apac {
    display: inherit;

    .#{$region-apac} & {
      display: none;
    }
  } @else if $region == me {
    display: inherit;

    .#{$region-me} & {
      display: none;
    }
  }
}

// Usage:
// Now works whether hiding a region (first example) or an just a country (second example)
// .your-class-name { @include show-for($region-eu); }
// .your-class-name { @include show-for($locale-china); }
@mixin show-for($location) {
  display: none;

  .#{$location} & {
    display: inherit;
  }
}

// Usage:
// .class { @include word-wrap(); }
// http://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
// ------------------------------------------------------------------------
@mixin word-wrap {
  // Be VERY careful with this, breaks normal words wheerever
  word-break: break-all;
  hyphens: auto;
}

// Usage:
// .class { @include ellipsis(); }
// http://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
// ------------------------------------------------------------------------
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// ------------------------------------------------------------------------
// Retina mixin - wraps content into correct media query
// http://css-tricks.com/snippets/css/retina-display-media-query (future proof media query)
//
// Usage:
// Images referenced in this fashion will automatically add the @1x image and the @2x image as supplied.
// If a cachebuster variable is supplied, it will be automatically added.
// $non-retina-image  - Required
// $retina-image      - Required
// $cachebuster       - Optional
//
// Any additional SASS that's supplied will be added as part of the retina media query,
// not as part of the non-retina selector.
//
// .class {
//     @include with-retina('non-retina-image', 'retina-image', 'optional cachebuster') {
//         background-size: contain;
//     }
// }
// ------------------------------------------------------------------------

@mixin with-retina($non-retina-image, $retina-image, $cachebuster: '') {
  background-image: image-url('#{$non-retina-image}?#{$cachebuster}');
  @media only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    background-image: image-url('#{$retina-image}?#{$cachebuster}');
    @content;
  }
}

// simple retina mixin only to make things simple
@mixin simple-retina {
  @media only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin simple-retina-in-landscape {
  @media only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (orientation: landscape) {
    @content;
  }
}

@mixin simple-retina-in-portrait {
  @media only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (orientation: portrait) {
    @content;
  }
}

// most likely iPhone 5 and similar
@mixin small-device-in-landscape {
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (orientation: landscape) {
    @content;
  }
}

// most likely iPhone 5 and similar
@mixin small-device-in-portrait {
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (orientation: portrait) {
    @content;
  }
}

// Typographic Mixins
// ------------------------------------------------------------------------
@mixin fontstack-teslaicons {
  font-family: 'tesla';
  font-weight: normal;
  font-style: normal;
  text-indent: 0;
  speak: none;
  line-height: 1;
}

@mixin fontstack-primary($weight: 'Gotham Book') {
  $fonts-primary: #{$weight}, $fontstack-china-primary, $fonts-base-secondary !default;
  font-family: $fonts-primary;
  font-weight: normal;
}

@mixin fontstack-secondary {
  font-family: $fonts-secondary;
}

@mixin fontstack-monospace {
  font-family: $fonts-monospace;
}

@mixin fontstack-fancypants {
  font-style: italic;
  font-family: $fonts-fancypants;
}

@mixin ultralight {
  font-weight: 100;
}

@mixin light {
  font-weight: 300;
}

@mixin book {
  font-weight: 400;
}

@mixin medium {
  font-weight: 500;
}

@mixin bold {
  font-weight: 700;
}

// If you want to use just the Gotham stack... this is unadvisable
@mixin gotham-extra-light {
  font-family: $gotham-extra-light;
}

@mixin gotham-light {
  font-family: $gotham-light;
}

@mixin gotham-book {
  font-family: $gotham-book;
}

@mixin gotham-medium {
  font-family: $gotham-medium;
}

@mixin gotham-bold {
  font-family: $gotham-bold;
}

//
@mixin container {
  $container-style: magic !global;
  position: relative;

  padding-left: $gutter;
  padding-right: $gutter;
  margin-left: auto;
  margin-right: auto;
}


// @TODO: move this back to Drupal
@mixin load-more-link {
  padding-bottom: 50px;

  &.pager-load-more-empty {
    display: none;
  }

  a {
    @include fontstack-primary('Gotham Medium');
    font-size: 12px;
    line-height: 20px;
    text-transform: uppercase;
    color: $tesla-primary;
  }
}

// base mobile reset
@mixin base-mobile-reset {
  width: 100%;
  clear: both;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
}

// --
@mixin border-radius($value) {
  border-radius: $value;
}

@mixin box-shadow($string) {
  box-shadow: $string;
}

// --
$default-transition-property: all;
$default-transition-duration: 1s;
$default-transition-function: false;

@mixin single-transition($variables) {
  transition: #{$variables};

  // send the animation to the GPU for better performance and
  // get that silky smooth 60fps :heart:
  transform: translateZ(0);
}

@mixin horizontal-list($padding: 4px, $direction: left) {
  li {
    @include horizontal-list-item($padding, $direction);
  }
}

@mixin horizontal-list-item($padding: 4px, $direction: left) {
  list-style-type: none;
  white-space: nowrap;
  float: $direction;
  @if $padding == true {
    padding: {
      left: $padding;
      right: $padding;
    }

    &:first-child {
      padding-#{$direction}: 0;
    }

    &:last-child {
      padding-#{opposite-position($direction)}: 0;
    }
  }
}

// http://compass-style.org/reference/compass/typography/lists/bullets/#mixin-no-bullets
@mixin no-bullets {
  list-style: none;

  li {
    @include no-bullet;
  }
}

// http://compass-style.org/reference/compass/typography/lists/bullets/#mixin-no-bullet
@mixin no-bullet {
  list-style-image: none;
  list-style-type: none;
  margin-left: 0;
}

// http://compass-style.org/reference/compass/utilities/tables/alternating_rows_and_columns/#mixin-alternating-rows-and-columns
@mixin alternating-rows-and-columns($even-row-color, $odd-row-color, $dark-intersection, $header-color: $white, $footer-color: $white) {
  th {
    background-color: $header-color;

    &.even,
    &:nth-child(2n) {
      background-color: $header-color - $dark-intersection;
    }
  }

  tr {

    &.odd,
    &:nth-child(2n+1) {

      td {
        background-color: $odd-row-color;

        &.even,
        &:nth-child(2n) {
          background-color: $odd-row-color - $dark-intersection;
        }
      }
    }

    &.even {

      td {
        background-color: $even-row-color;

        &.even,
        &:nth-child(2n) {
          background-color: $even-row-color - $dark-intersection;
        }
      }
    }
  }


  tfoot {

    th,
    td {
      background-color: $footer-color;

      &.even,
      &:nth-child(2n) {
        background-color: $footer-color - $dark-intersection;
      }
    }
  }
}

@mixin transform($string) {
  transform: #{$string};
}

@mixin transition-duration($string: $default-transition-duration) {
  transition-duration: $string;
}

@mixin locale-text-align($value) {
  text-align: $value;

  .#{$locale-hongkong_chinese} &,
  .#{$locale-japan} &,
  .#{$locale-china} &,
  .#{$locale-macau_chinese} & {
    text-align: left;
  }
}

/*doc

---
title: Transitions
name: Transitions
category: Animations
---

When dealing with elements being added to the HTML DOM or taken off the DOM post-load, we may want to add animation to these transitions to make it smooth and seamless for our users.
Most popular javascript frameworks and third party packages add the following classes to indicate stages of transition:

1. `.{custom}-enter`
2. `.{custom}-enter-active`
3. `.{custom}-leave`
4. `.{custom}-leave-active`

- [ReactJS Animation](https://facebook.github.io/react/docs/animation.html)
- [AngularJS Animation](https://docs.angularjs.org/guide/animations)

## Default Animations
The default animations for Particles is created using `.enter-leave-animation-default` mixin. There are several characteristics to a default set of animations:

 1. Animated element starts off with opacity: .01,
 2. and transitions to opacity: 1 in its enter-active state with 500ms transition on all properties with no transition timing function,
 3. when leaving the DOM the element starts with opacity: 1,
 4. and transitions to opacity: .01 in its leave-active state with 300ms transition on all properties with no transition timing function.

```sass_example
@include enter-leave-animation-default(ng)
```

The above sass @include example produces the following css:

```sass_example
.ng-enter {
    opacity: .01;
}
.ng-enter.ng-enter-active {
    opacity: 1;
    -webkit-transition: opacity 500ms ease-in;
       -moz-transition: opacity 500ms ease-in;
         -o-transition: opacity 500ms ease-in;
            transition: opacity 500ms ease-in;
}
.ng-leave {
    opacity: 1;
}
.ng-leave.ng-leave-active {
    opacity: .01;
    -webkit-transition: opacity 300ms ease-in;
       -moz-transition: opacity 300ms ease-in;
         -o-transition: opacity 300ms ease-in;
            transition: opacity 300ms ease-in;
}
```

The included mixin in use:

```sass_example
@mixin enter-leave-animation-default($classname: general) {
    @include enter-animation($classname)
    @include enter-active-animation($classname, opacity, 500ms, ease-in)
    @include leave-animation($classname)
    @include leave-active-animation($classname, opacity, 300ms, ease-in)
}
```

## Custom Variations

We can customize animations for every step in 4 stages of transition by using all four mixins instead of a single general one:

```sass_example
@include enter-animation(ng)
@include enter-active-animation(ng, opacity, 500ms, ease-in)
@include leave-animation(ng)
@include leave-active-animation(ng, opacity, 300ms, ease-in)
```
The parameters passed are:

1. `$classname`  - Optional. Defaults to "general"
2. `$property`   - Optional. Defaults to "all"
3. `$duration`   - Optional. Defaults to "500ms"
4. `$function`  - Optional. Defaults to "false"

Additionally, we can customize the animation further by passing the content to the `enter-animation`, `leave-animation`, `enter-active-animation` and `leave-active-animation` mixins as follows:

```sass_example
@include enter-animation(general) {
    width: 100%;
}
@include enter-active-animation(general, width, 2s, ease-in) {
    width: 50%;
}
```

The above mixin will produce the following css:

```sass_example
.general-enter {
    width: 100%;
}
.general-enter.general-enter-active {
    width: 50%;
    -webkit-transition: width 2s ease-in;
       -moz-transition: width 2s ease-in;
         -o-transition: width 2s ease-in;
            transition: width 2s ease-in;
}
```
*/
// ------------------------------------------------------------------------
// Enter / Leave animation mixin - offers default animation or executes custom styling
// https://facebook.github.io/react/docs/animation.html (based on React enter / leave classes)
//
// Usage:
// Defines initial styling of element "enter" state of animation for .{classname}-enter
// If custom SASS is supplied, it is used instead of default opacity: .01
// $classname  - Optional. Defaults to "general-{action}"
// $nocontent  - Optional. Defaults to true and uses pre-defined opacity on each animation stage
// @include enter-animation(general)
//  OR
// @include enter-animation(general, false) {
//      opacity: .05;
// }
// ------------------------------------------------------------------------
@mixin enter-animation($classname: general, $nocontent: true) {
  .#{$classname}-enter {
    @if ($nocontent) {
      opacity: .01;
    } @else {
      @content;
    }
  }
}

// ------------------------------------------------------------------------
// Usage:
// Defines initial styling of element "enter-active" state of animation for .{classname}-enter.{classname}-enter-active
// If custom SASS is supplied, it is used instead of default opacity: 1
// $classname  - Optional. Defaults to "general"
// $property   - Optional. Defaults to "all"
// $duration   - Optional. Defaults to "500ms"
// $function  - Optional. Defaults to "false"
// $nocontent  - Optional. Defaults to "true" and uses pre-defined opacity on each animation stage
// @include enter-active-animation(general, opacity, 500ms, ease-in)
//  OR
// @include enter-active-animation(general, opacity, 500ms, ease-in) {
//      opacity: .9;
// }
// ------------------------------------------------------------------------
@mixin enter-active-animation($classname: general, $property: all, $duration: 500ms, $function: false, $nocontent: true) {
  .#{$classname}-enter {
    &.#{$classname}-enter-active {
      @if ($nocontent) {
        opacity: 1;
      } @else {
        @content;
      }
      transition: $property $duration $function;
    }
  }
}

// ------------------------------------------------------------------------
// Usage:
// Defines initial styling of element "leave" state of animation for .{classname}-leave
// If custom SASS is supplied, it is used instead of default opacity: 1
// $classname  - Optional. Defaults to "general-{action}"
// $nocontent  - Optional. Defaults to true and uses pre-defined opacity on each animation stage
// @include leave-animation(general)
//  OR
// @include leave-animation(general, false) {
//      opacity: .07;
// }
// ------------------------------------------------------------------------
@mixin leave-animation($classname: general, $nocontent: true) {
  .#{$classname}-leave {
    @if ($nocontent) {
      opacity: 1;
    } @else {
      @content;
    }
  }
}

// ------------------------------------------------------------------------
// Usage:
// Defines initial styling of element "leave-active" state of animation for .{classname}-leave.{classname}-leave-active
// If custom SASS is supplied, it is used instead of default opacity: .01
// $classname  - Optional. Defaults to "general"
// $property   - Optional. Defaults to "all"
// $duration   - Optional. Defaults to "300ms"
// $function  - Optional. Defaults to "false"
// $nocontent  - Optional. Defaults to "true" and uses pre-defined opacity on each animation stage
// @include leave-active-animation(general, opacity, 300ms, ease-in)
//  OR
// @include leave-active-animation(general, opacity, 300ms, ease-in) {
//      opacity: .9;
// }
// ------------------------------------------------------------------------
@mixin leave-active-animation($classname: general, $property: all, $duration: 300ms, $function: false, $nocontent: true) {
  .#{$classname}-leave {
    &.#{$classname}-leave-active {
      @if ($nocontent) {
        opacity: .01;
      } @else {
        @content;
      }
      transition: $property $duration $function;
    }
  }
}

// ------------------------------------------------------------------------
// Enter / Leave animation mixin - executes default animation
// https://facebook.github.io/react/docs/animation.html (based on React enter / leave classes)
//
// Usage:
// Defines styling of element in "enter/leave" states of animation for
// .{classname}-enter, .{classname}-enter-active .{classname}-leave, .{classname}-leave-active
// $classname  - Optional. Defaults to "general-{action}"
// @include enter-leave-animation-default(general)
// ------------------------------------------------------------------------
@mixin enter-leave-animation-default($classname: general) {
  @include enter-animation($classname)
  @include enter-active-animation($classname, opacity, 500ms, ease-in)
  @include leave-animation($classname)
  @include leave-active-animation($classname, opacity, 300ms, ease-in)
}
