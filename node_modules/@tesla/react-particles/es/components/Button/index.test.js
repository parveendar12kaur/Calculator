'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<ButtonGroup />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.ButtonGroup, null)).matchesElement(_react2.default.createElement('div', { className: 'btn-group' }))).toBe(true);
  });

  it('should support styling', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.ButtonGroup, { style: { color: 'black' } })).matchesElement(_react2.default.createElement('div', { className: 'btn-group', style: { color: 'black' } }))).toBe(true);
  });
}); /* global describe, it, expect, jest */


describe('<Button />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      null,
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary' },
      'Foo'
    ))).toBe(true);
  });

  it('should support different types', function () {
    var types = Array.from(Object.keys(_.ButtonTypes), function (v) {
      return _.ButtonTypes[v];
    });
    types.forEach(function (type) {
      expect((0, _enzyme.shallow)(_react2.default.createElement(
        _2.default,
        { type: type },
        'Foo'
      )).is('.btn-' + type)).toBe(true);
    });
  });

  it('should support different sizes', function () {
    var sizes = Array.from(Object.keys(_.ButtonSizes), function (v) {
      return _.ButtonSizes[v];
    });
    sizes.forEach(function (size) {
      expect((0, _enzyme.shallow)(_react2.default.createElement(
        _2.default,
        { size: size },
        'Foo'
      )).is('.btn-' + size)).toBe(true);
    });
  });

  it('should support outlines and styling', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: true },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary btn-outline' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: false },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: true, outlineStyle: _.OutlineStyle.Black },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary btn-outline outline-black' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: false, outlineStyle: _.OutlineStyle.Black },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: true, outlineStyle: _.OutlineStyle.Alternate },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary btn-outline outline-alternate' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { outline: false, outlineStyle: _.OutlineStyle.Alternate },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary' },
      'Foo'
    ))).toBe(true);
  });

  it('should support transparent', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { transparent: true },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary btn-transparent' },
      'Foo'
    ))).toBe(true);

    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { transparent: true, transparentDark: true },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { className: 'btn-primary btn-transparent transparent-dark' },
      'Foo'
    ))).toBe(true);
  });

  it('supports form type', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { formType: _.FormTypes.Submit },
      'Foo'
    )).matchesElement(_react2.default.createElement(
      'button',
      { type: 'submit' },
      'Foo'
    ))).toBe(true);
  });

  it('should handle unset onClick without errors', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      null,
      'Foo'
    ));
    wrapper.find('button').simulate('click');
  });

  it('should handle onClick', function () {
    var onClick = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { onClick: onClick },
      'Foo'
    ));

    // simulate click
    expect(onClick.mock.calls.length).toBe(0);
    wrapper.find('button').simulate('click');
    expect(onClick.mock.calls.length).toBe(1);
  });
});