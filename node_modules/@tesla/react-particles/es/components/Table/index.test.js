'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Table />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, null)).matchesElement(_react2.default.createElement('table', null))).toBe(true);
  });

  it('is composed of a table element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, null)).matchesElement(_react2.default.createElement('table', null))).toBe(true);
  });

  it('has class "table"', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, null)).hasClass('table')).toBe(true);
  });

  it('defaults to empty table when no props specified', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, null)).matchesElement(_react2.default.createElement('table', { className: 'table' }))).toBe(true);
  });

  it('overrides "columns" and "data" props when child elements are declared', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _2.default,
      { columns: [], data: [] },
      _react2.default.createElement(
        _.TableHead,
        null,
        _react2.default.createElement(
          _.TableRow,
          null,
          _react2.default.createElement(
            _.TableHeadCell,
            null,
            'foo'
          )
        )
      ),
      _react2.default.createElement(
        _.TableBody,
        null,
        _react2.default.createElement(
          _.TableRow,
          null,
          _react2.default.createElement(
            _.TableCell,
            null,
            'bar'
          )
        )
      )
    )).matchesElement(_react2.default.createElement(
      'table',
      { className: 'table' },
      _react2.default.createElement(
        _.TableHead,
        null,
        _react2.default.createElement(
          _.TableRow,
          null,
          _react2.default.createElement(
            _.TableHeadCell,
            null,
            'foo'
          )
        )
      ),
      _react2.default.createElement(
        _.TableBody,
        null,
        _react2.default.createElement(
          _.TableRow,
          null,
          _react2.default.createElement(
            _.TableCell,
            null,
            'bar'
          )
        )
      )
    ))).toBe(true);
  });

  it('supports className prop', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { className: 'foo' })).hasClass('foo')).toBe(true);
  });

  it('supports style prop', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { style: { backgroundColor: 'red' } })).html()).toBe('<table class="table" style="background-color:red;"></table>');
  });

  describe('columns prop', function () {
    it('renders a column header for each item in props.columns', function () {
      var columns = [{
        header: 'header1',
        accessor: 'foo'
      }, {
        header: 'header2',
        accessor: 'bar'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header1'
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header2'
            )
          )
        )
      ))).toBe(true);
    });

    it('renders a column header for each item in props.columns where header is a function that returns a component', function () {
      function MyComponent(props) {
        return _react2.default.createElement(
          'h1',
          props,
          'foobar'
        );
      }

      var columns = [{
        header: function header() {
          return _react2.default.createElement(
            MyComponent,
            null,
            'header1'
          );
        },
        accessor: 'foo'

      }, {
        header: function header() {
          return _react2.default.createElement(
            MyComponent,
            null,
            'header2'
          );
        },
        accessor: 'bar'
      }];

      var data = [{
        foo: 'foo1',
        bar: 'bar1'
      }, {
        foo: 'foo2',
        bar: 'bar2'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns, data: data })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'header1'
              )
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'header2'
              )
            )
          )
        ),
        _react2.default.createElement(
          _.TableBody,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo1'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar1'
            )
          ),
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo2'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar2'
            )
          )
        )
      ))).toBe(true);
    });
  });

  describe('data prop', function () {
    it('renders an empty row cell for each prop.data item given no accessor', function () {
      var columns = [{
        header: 'header1'
      }, {
        header: 'header2'
      }];

      var data = [{
        foo: 'foo1',
        bar: 'bar1'
      }, {
        foo: 'foo2',
        bar: 'bar2'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns, data: data })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header1'
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header2'
            )
          )
        ),
        _react2.default.createElement(
          _.TableBody,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(_.TableCell, null),
            _react2.default.createElement(_.TableCell, null)
          ),
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(_.TableCell, null),
            _react2.default.createElement(_.TableCell, null)
          )
        )
      ))).toBe(true);
    });

    it('renders a row cell for each prop.data item given a column accessor string', function () {
      var columns = [{
        header: 'header1',
        accessor: 'foo'
      }, {
        header: 'header2',
        accessor: 'bar'
      }];

      var data = [{
        foo: 'foo1',
        bar: 'bar1'
      }, {
        foo: 'foo2',
        bar: 'bar2'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns, data: data })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header1'
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header2'
            )
          )
        ),
        _react2.default.createElement(
          _.TableBody,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo1'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar1'
            )
          ),
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo2'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar2'
            )
          )
        )
      ))).toBe(true);
    });

    it('renders a row cell for each prop.data item given a column accessor function', function () {
      var columns = [{
        header: 'header1',
        accessor: function accessor(row) {
          return row.foo;
        }
      }, {
        header: 'header2',
        accessor: function accessor(row) {
          return row.bar;
        }
      }];

      var data = [{
        foo: 'foo1',
        bar: 'bar1'
      }, {
        foo: 'foo2',
        bar: 'bar2'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns, data: data })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header1'
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header2'
            )
          )
        ),
        _react2.default.createElement(
          _.TableBody,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo1'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar1'
            )
          ),
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              'foo2'
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              'bar2'
            )
          )
        )
      ))).toBe(true);
    });

    it('renders a row cell for each prop.data item given an accessor function that returns a component', function () {
      function MyComponent(props) {
        return _react2.default.createElement(
          'h1',
          props,
          'foobar'
        );
      }

      var columns = [{
        header: 'header1',
        accessor: function accessor(row) {
          return _react2.default.createElement(
            MyComponent,
            null,
            row.foo
          );
        }

      }, {
        header: 'header2',
        accessor: function accessor(row) {
          return _react2.default.createElement(
            MyComponent,
            null,
            row.bar
          );
        }
      }];

      var data = [{
        foo: 'foo1',
        bar: 'bar1'
      }, {
        foo: 'foo2',
        bar: 'bar2'
      }];

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { columns: columns, data: data })).matchesElement(_react2.default.createElement(
        'table',
        { className: 'table' },
        _react2.default.createElement(
          _.TableHead,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header1'
            ),
            _react2.default.createElement(
              _.TableHeadCell,
              null,
              'header2'
            )
          )
        ),
        _react2.default.createElement(
          _.TableBody,
          null,
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'foo1'
              )
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'bar1'
              )
            )
          ),
          _react2.default.createElement(
            _.TableRow,
            null,
            _react2.default.createElement(
              _.TableCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'foo2'
              )
            ),
            _react2.default.createElement(
              _.TableCell,
              null,
              _react2.default.createElement(
                MyComponent,
                null,
                'bar2'
              )
            )
          )
        )
      ))).toBe(true);
    });
  });

  describe('type prop', function () {
    it('supports type prop', function () {
      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { type: _.TableTypes.Data })).hasClass('table-data')).toBe(true);

      expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { type: _.TableTypes.Forum })).hasClass('table-forum')).toBe(true);
    });
  });
}); /* global describe, it, expect */


describe('<TableHead />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableHead, null)).matchesElement(_react2.default.createElement('thead', { className: 'table-head' }))).toBe(true);
  });

  it('is composed of a thead element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableHead, null)).matchesElement(_react2.default.createElement('thead', null))).toBe(true);
  });

  it('has class "table-head"', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableHead, null)).hasClass('table-head')).toBe(true);
  });
});

describe('<TableHeadCell />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableHeadCell, null)).matchesElement(_react2.default.createElement('th', null))).toBe(true);
  });

  it('is composed of a td element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableHeadCell, null)).matchesElement(_react2.default.createElement('th', null))).toBe(true);
  });
});

describe('<TableBody />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableBody, null)).matchesElement(_react2.default.createElement('tbody', { className: 'table-body' }))).toBe(true);
  });

  it('is composed of a tbody element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableBody, null)).matchesElement(_react2.default.createElement('tbody', null))).toBe(true);
  });

  it('has class "table-body"', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableBody, null)).hasClass('table-body')).toBe(true);
  });
});

describe('<TableRow />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableRow, null)).matchesElement(_react2.default.createElement('tr', { className: 'table-row' }))).toBe(true);
  });

  it('is composed of a tr element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableRow, null)).matchesElement(_react2.default.createElement('tr', null))).toBe(true);
  });

  it('has class "table-row"', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableRow, null)).hasClass('table-row')).toBe(true);
  });
});

describe('<TableCell />', function () {
  it('renders without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableCell, null)).matchesElement(_react2.default.createElement('td', null))).toBe(true);
  });

  it('is composed of a tr element', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableCell, null)).matchesElement(_react2.default.createElement('td', null))).toBe(true);
  });

  it('supports class style prop', function () {
    var style = {
      foo: 'bar'
    };

    expect((0, _enzyme.shallow)(_react2.default.createElement(_.TableCell, { style: style })).html()).toBe('<td style="foo:bar;"></td>');
  });
});