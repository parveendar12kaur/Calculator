'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnhancedOption = exports.PureMultiSelect = undefined;
exports.SelectResults = SelectResults;
exports.SelectResultGroup = SelectResultGroup;
exports.SelectResultSet = SelectResultSet;
exports.SelectOption = SelectOption;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _recompose = require('recompose');

var _Checkbox = require('../Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _groupBy = require('../../utilities/groupBy');

var _groupBy2 = _interopRequireDefault(_groupBy);

var _select = require('../../scss/_particles/components/_forms/_select.scss');

var _select2 = _interopRequireDefault(_select);

var _tables = require('../../scss/_particles/components/_tables.scss');

var _tables2 = _interopRequireDefault(_tables);

var _styles = require('./styles.js');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var enhance = (0, _recompose.compose)(_radium2.default, (0, _recompose.withState)('open', 'toggleSelect', false), (0, _recompose.withHandlers)({
  onToggle: function onToggle(props) {
    return function (open) {
      props.toggleSelect(open);
    };
  },
  handleClickOutside: function handleClickOutside(props) {
    return function () {
      if (props.open) {
        props.toggleSelect(!props.open);
      }
    };
  },
  handleSelect: function handleSelect(props) {
    return function (value) {
      var selectedValues = props.selectedValues.slice();
      var index = selectedValues.indexOf(value);
      if (index > -1) {
        selectedValues.splice(index, 1);
      } else {
        selectedValues.push(value);
      }
      props.onChange(selectedValues);
    };
  },
  handleSelectAll: function handleSelectAll(props) {
    return function (e) {
      e.preventDefault();
      var selectedValues = props.selectedValues.slice();
      // if every option is selected
      if (selectedValues.length === props.options.length) {
        selectedValues = [];
      } else {
        selectedValues = props.options.map(function (option) {
          return option.value;
        });
      }
      props.onChange(selectedValues);
    };
  },
  handleSelectGroup: function handleSelectGroup(props) {
    return function (group) {
      var options = (0, _groupBy2.default)(props.options, props.groupBy);
      var groupValues = options[group].map(function (option) {
        return option.value;
      });
      var selectedValues = props.selectedValues.slice();
      // if every group in the option is selected
      if (groupValues.every(function (value) {
        return selectedValues.includes(value);
      })) {
        selectedValues = selectedValues.filter(function (value) {
          return !groupValues.includes(value);
        });
      } else {
        selectedValues = selectedValues.filter(function (value) {
          return !groupValues.includes(value);
        }).concat(groupValues);
      }
      props.onChange(selectedValues);
    };
  }
}), _reactOnclickoutside2.default);

// default export with enhance
var EnhancedMultiSelect = enhance(MultiSelect);
EnhancedMultiSelect.propTypes = Object.assign({}, MultiSelect.propTypes);
EnhancedMultiSelect.defaultProps = Object.assign({}, MultiSelect.defaultProps);
exports.default = EnhancedMultiSelect;

// pure export for testing and pure component

exports.PureMultiSelect = MultiSelect;

MultiSelect.propTypes = {
  name: _propTypes2.default.string.isRequired,
  placeholder: _propTypes2.default.string,
  label: _propTypes2.default.string,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    value: _propTypes2.default.any,
    label: _propTypes2.default.string
  })),
  open: _propTypes2.default.bool,
  onToggle: _propTypes2.default.func,
  selectedValues: _propTypes2.default.array,
  selectFormat: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  selectAll: _propTypes2.default.bool,
  selectAllLabel: _propTypes2.default.string,
  unselectAllLabel: _propTypes2.default.string,
  emptyLabel: _propTypes2.default.string,
  groupBy: _propTypes2.default.string
};

MultiSelect.defaultProps = {
  options: [],
  selectedValues: [],
  placeholder: 'Please select a value.',
  selectAll: false,
  selectAllLabel: 'Select all',
  unselectAllLabel: 'Unselect all',
  emptyLabel: 'Empty',
  selectFormat: formatValueLabel
};

function formatValueLabel(options, values) {
  var selectedLabels = values.map(function (value) {
    return options[options.findIndex(function (option) {
      return option.value === value;
    })].label;
  });
  if (selectedLabels.length > 3) {
    return '(' + values.length + ') selected';
  }
  return selectedLabels.join(', ') + ' selected';
}

function MultiSelect(props) {
  var placeholder = props.options.length > 0 ? props.placeholder : props.emptyLabel;
  var selectLabel = props.selectedValues.length > 0 ? props.selectFormat(props.options, props.selectedValues) : placeholder;
  var options = props.groupBy ? (0, _groupBy2.default)(props.options, props.groupBy) : props.options;
  var showSelectAll = props.options.length > 0 ? props.selectAll : false;
  var selectAllLabel = props.selectedValues.length === props.options.length ? props.unselectAllLabel : props.selectAllLabel;
  var selectAll = _react2.default.createElement(
    'a',
    { style: { marginLeft: 10 }, href: '#', onClick: props.handleSelectAll },
    selectAllLabel
  );
  var selectableOptions = [];
  // if options are grouped
  if (props.groupBy) {
    selectableOptions = selectableOptions.concat(Object.keys(options).map(function (group, index) {
      return _react2.default.createElement(SelectResultGroup, {
        checked: options[group].every(function (option) {
          return props.selectedValues.includes(option.value);
        }),
        group: group,
        onSelectGroup: props.handleSelectGroup,
        options: options[group],
        selectedValues: props.selectedValues,
        onSelect: props.handleSelect,
        key: index + 1
      });
    }));
  } else {
    selectableOptions.push(_react2.default.createElement(SelectResultSet, {
      options: options,
      selectedValues: props.selectedValues,
      onSelect: props.handleSelect,
      key: 1
    }));
  }
  return _react2.default.createElement(
    'div',
    { className: (0, _classnames2.default)(_select2.default['form-item'], _select2.default['form-type-select']), style: [_styles2.default.selectable, _styles2.default.container] },
    _react2.default.createElement(
      'label',
      { htmlFor: props.name, className: _select2.default['form-label'] },
      props.label,
      showSelectAll ? selectAll : null
    ),
    _react2.default.createElement('input', { name: props.name, type: 'hidden', value: props.selectedValues.join(',') }),
    _react2.default.createElement(
      'span',
      { className: _select2.default['form-select-overlay'] },
      _react2.default.createElement(
        'div',
        { className: _select2.default['form-select'], onClick: function onClick() {
            return props.onToggle(!props.open);
          } },
        _react2.default.createElement(
          'p',
          { style: { margin: 0 } },
          selectLabel
        )
      )
    ),
    _react2.default.createElement(
      'div',
      { style: _styles2.default.results },
      _react2.default.createElement(
        SelectResults,
        { open: props.open },
        selectableOptions
      )
    )
  );
}

SelectResults.propTypes = {
  open: _propTypes2.default.bool
};
SelectResults.defaultProps = {
  open: false
};
function SelectResults(props) {
  if (!props.open || props.children && props.children.length === 0) {
    return null;
  }
  return _react2.default.createElement(
    'table',
    { className: (0, _classnames2.default)(_tables2.default['table'], _tables2.default['table-data']) },
    props.children
  );
}

SelectResultGroup.propTypes = {
  checked: _propTypes2.default.bool,
  group: _propTypes2.default.string,
  onSelectGroup: _propTypes2.default.func,
  options: _propTypes2.default.array,
  selectedValues: _propTypes2.default.array,
  onSelect: _propTypes2.default.func
};
function SelectResultGroup(props) {
  var options = props.options.map(function (option, index) {
    return _react2.default.createElement(EnhancedOption, {
      checked: props.selectedValues.includes(option.value),
      value: option.value,
      label: option.label,
      onSelect: props.onSelect,
      key: index
    });
  });
  var selectedCount = props.options.reduce(function (acc, option) {
    if (props.selectedValues.includes(option.value)) {
      return acc + 1;
    }
    return acc;
  }, 0);
  return _react2.default.createElement(
    'tbody',
    { className: _tables2.default['table-body'] },
    _react2.default.createElement(EnhancedOption, {
      checked: props.checked,
      value: props.group,
      label: props.group + ' (' + selectedCount + ' selected)',
      onSelect: props.onSelectGroup,
      group: true
    }),
    !props.checked ? options : null
  );
}

SelectResultSet.propTypes = {
  checked: _propTypes2.default.bool,
  options: _propTypes2.default.array,
  selectedValues: _propTypes2.default.array,
  onSelect: _propTypes2.default.func
};
function SelectResultSet(props) {
  return _react2.default.createElement(
    'tbody',
    { className: _tables2.default['table-body'] },
    props.options.map(function (option, index) {
      return _react2.default.createElement(EnhancedOption, {
        checked: props.selectedValues.includes(option.value),
        value: option.value,
        label: option.label,
        onSelect: props.onSelect,
        key: index
      });
    })
  );
}

var EnhancedOption = exports.EnhancedOption = (0, _radium2.default)(SelectOption);
EnhancedOption.propTypes = Object.assign({}, SelectOption.propTypes);

SelectOption.propTypes = {
  checked: _propTypes2.default.bool,
  value: _propTypes2.default.any,
  label: _propTypes2.default.string,
  onSelect: _propTypes2.default.func,
  group: _propTypes2.default.bool
};
function SelectOption(props) {
  return _react2.default.createElement(
    'tr',
    {
      className: _tables2.default['table-row'],
      style: [_styles2.default.resultsRow, props.checked && _styles2.default.checked],
      onClick: function onClick(e) {
        e.preventDefault();
        props.onSelect(props.value);
      }
    },
    _react2.default.createElement(
      'td',
      { style: _styles2.default.checkCol },
      _react2.default.createElement(_Checkbox2.default, { name: props.value.toString(), checked: props.checked })
    ),
    _react2.default.createElement(
      'td',
      { style: _styles2.default.resultsCol },
      _react2.default.createElement(
        'p',
        { style: props.group && _styles2.default.group },
        props.label
      )
    )
  );
}