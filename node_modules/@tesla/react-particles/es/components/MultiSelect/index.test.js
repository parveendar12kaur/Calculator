'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _Checkbox = require('../Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _groupBy = require('../../utilities/groupBy');

var _groupBy2 = _interopRequireDefault(_groupBy);

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var options = [{ value: 'foo', label: 'foo', group: 'abc' }, { value: 'bar', label: 'bar', group: 'abc' }, { value: 'coo', label: 'coo', group: 'bcd' }, { value: 'boo', label: 'boo', group: 'bcd' }]; /* global describe, it, expect, jest */


describe('<MultiSelect />', function () {
  it('should handle toggleSelect', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar' }));
    expect(wrapper.prop('open')).toBe(false);
    wrapper.prop('toggleSelect')(true);
    expect(wrapper.prop('open')).toBe(true);
  });

  it('should handle toggleSelect with onToggle', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar' }));
    expect(wrapper.prop('open')).toBe(false);
    wrapper.dive().prop('onToggle')(true);
    expect(wrapper.prop('open')).toBe(true);
  });

  it('should handle handleClickOutside', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar' }));
    // open it first
    wrapper.prop('toggleSelect')(true);

    // if open, and clicked outside, expect to close.
    expect(wrapper.prop('open')).toBe(true);
    wrapper.dive().prop('handleClickOutside')();
    expect(wrapper.prop('open')).toBe(false);

    // if already closed, and clicked outside, stay closed.
    expect(wrapper.prop('open')).toBe(false);
    wrapper.dive().prop('handleClickOutside')();
    expect(wrapper.prop('open')).toBe(false);
  });

  it('should handle handleSelect', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar', onChange: onChange, options: options, selectedValues: [] }));
    // from empty state
    expect(onChange.mock.calls.length).toBe(0);
    // select value "foo"
    wrapper.dive().prop('handleSelect')('foo');
    // we should have "foo"
    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(['foo']);

    // select value "foo" with already selected value of "foo"
    wrapper.setProps({ selectedValues: ['foo'] });
    wrapper.dive().prop('handleSelect')('foo');
    expect(onChange.mock.calls.length).toBe(2);
    // expect to get empty, it will "unselect" the value.
    expect(onChange.mock.calls[1][0]).toEqual([]);
  });

  it('should handle handleSelectAll', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar', onChange: onChange, options: options, selectedValues: [] }));
    // from empty state
    expect(onChange.mock.calls.length).toBe(0);
    // select all values
    wrapper.dive().prop('handleSelectAll')({
      preventDefault: function preventDefault() {}
    });
    // we should have all the values from the option
    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(options.map(function (option) {
      return option.value;
    }));

    // select alll the values
    wrapper.setProps({ selectedValues: options.map(function (option) {
        return option.value;
      }) });
    wrapper.dive().prop('handleSelectAll')({
      preventDefault: function preventDefault() {}
    });
    expect(onChange.mock.calls.length).toBe(2);
    // expect to get empty, unselect all
    expect(onChange.mock.calls[1][0]).toEqual([]);
  });

  it('should handle handleSelectGroup', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar', onChange: onChange, options: options, selectedValues: [], groupBy: 'group' }));
    var groupedOptions = (0, _groupBy2.default)(options, 'group');
    // from empty state
    expect(onChange.mock.calls.length).toBe(0);
    // select all values
    wrapper.dive().prop('handleSelectGroup')('abc');
    // we should have all the values from the option
    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(groupedOptions.abc.map(function (option) {
      return option.value;
    }));

    // select all the values
    wrapper.setProps({ selectedValues: groupedOptions.abc.map(function (option) {
        return option.value;
      }) });
    wrapper.dive().prop('handleSelectGroup')('abc');
    expect(onChange.mock.calls.length).toBe(2);
    // expect to get empty, unselect all
    expect(onChange.mock.calls[1][0]).toEqual([]);

    // select some values
    wrapper.setProps({ selectedValues: ['foo'] });
    wrapper.dive().prop('handleSelectGroup')('abc');
    expect(onChange.mock.calls.length).toBe(3);
    // expect to all the groups as partial
    expect(onChange.mock.calls[2][0]).toEqual(['foo', 'bar']);
  });
});

describe('<PureMultiSelect />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', open: false })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: '' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            'Empty'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: false },
          _react2.default.createElement(_.SelectResultSet, null)
        )
      )
    ))).toBe(true);
  });

  it('should render selectAll option', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', options: options, selectAll: true, open: false })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar',
        _react2.default.createElement(
          'a',
          { href: '#' },
          'Select all'
        )
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: '' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            'Please select a value.'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: false },
          _react2.default.createElement(_.SelectResultSet, null)
        )
      )
    ))).toBe(true);
  });

  it('should hide selectAll option when options are empty', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', selectAll: true, open: false })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: '' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            'Empty'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: false },
          _react2.default.createElement(_.SelectResultSet, null)
        )
      )
    ))).toBe(true);
  });

  it('should render with groupBy', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', open: true, options: options, groupBy: 'group' })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: '' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            'Please select a value.'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: true },
          _react2.default.createElement(_.SelectResultGroup, { group: 'abc' }),
          _react2.default.createElement(_.SelectResultGroup, { group: 'bcd' })
        )
      )
    ))).toBe(true);
  });

  it('should have ungrouped label based on selected values fewer than 3', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', open: true, options: options, selectedValues: ['foo', 'bar'] })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: 'foo,bar' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            'foo, bar selected'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: true },
          _react2.default.createElement(_.SelectResultSet, null)
        )
      )
    ))).toBe(true);
  });

  it('should have ungrouped label based on selected values more than 3', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', open: true, options: options, selectedValues: ['foo', 'bar', 'coo', 'boo'] })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement('input', { name: 'foo', type: 'hidden', value: 'foo,bar,coo,boo' }),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'div',
          { className: 'form-select' },
          _react2.default.createElement(
            'p',
            null,
            '(4) selected'
          )
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _.SelectResults,
          { open: true },
          _react2.default.createElement(_.SelectResultSet, null)
        )
      )
    ))).toBe(true);
  });

  it('should handle onToggle when clicked', function () {
    var onToggle = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_.PureMultiSelect, { name: 'foo', label: 'bar', open: false, onToggle: onToggle }));
    // simulate toggle
    expect(onToggle.mock.calls.length).toBe(0);
    wrapper.find('.form-select').simulate('click');
    expect(onToggle.mock.calls.length).toBe(1);
  });
});

describe('<SelectResults />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.SelectResults, { open: true })).matchesElement(_react2.default.createElement('table', { className: 'table table-data' }))).toBe(true);
  });

  it('should render nothing if not open', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.SelectResults, null)).matchesElement(null)).toBe(true);
  });

  it('should render nothing if open but doesnt have any options', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _.SelectResults,
      { open: true },
      []
    )).matchesElement(null)).toBe(true);
  });
});

describe('<SelectResultSet />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.SelectResultSet, { options: options, selectedValues: ['foo'] })).matchesElement(_react2.default.createElement(
      'tbody',
      { className: 'table-body' },
      _react2.default.createElement(_.EnhancedOption, { checked: true, value: 'foo', label: 'foo' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'bar', label: 'bar' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'coo', label: 'coo' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'boo', label: 'boo' })
    ))).toBe(true);
  });
});

describe('<SelectResultGroup />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.SelectResultGroup, { options: options, selectedValues: ['foo'], group: 'abc' })).matchesElement(_react2.default.createElement(
      'tbody',
      { className: 'table-body' },
      _react2.default.createElement(_.EnhancedOption, { value: 'abc', label: 'abc (1 selected)', group: true }),
      _react2.default.createElement(_.EnhancedOption, { checked: true, value: 'foo', label: 'foo' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'bar', label: 'bar' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'coo', label: 'coo' }),
      _react2.default.createElement(_.EnhancedOption, { checked: false, value: 'boo', label: 'boo' })
    ))).toBe(true);
  });

  it('should handle groups when all checked', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.SelectResultGroup, { options: options, selectedValues: options.map(function (option) {
        return option.value;
      }), group: 'abc', checked: true })).matchesElement(_react2.default.createElement(
      'tbody',
      { className: 'table-body' },
      _react2.default.createElement(_.EnhancedOption, { value: 'abc', label: 'abc (4 selected)', group: true })
    ))).toBe(true);
  });
});

describe('<EnhancedOption />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.EnhancedOption, { value: 'foo', label: 'bar' })).matchesElement(_react2.default.createElement(
      'tr',
      { className: 'table-row' },
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(_Checkbox2.default, { name: 'foo', checked: false })
      ),
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(
          'p',
          null,
          'bar'
        )
      )
    ))).toBe(true);
  });

  it('should handle checked', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.EnhancedOption, { value: 'foo', label: 'bar', checked: true })).matchesElement(_react2.default.createElement(
      'tr',
      { className: 'table-row' },
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(_Checkbox2.default, { name: 'foo', checked: true })
      ),
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(
          'p',
          null,
          'bar'
        )
      )
    ))).toBe(true);
  });

  it('should handle groups', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.EnhancedOption, { value: 'foo', label: 'bar', group: true })).matchesElement(_react2.default.createElement(
      'tr',
      { className: 'table-row' },
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(_Checkbox2.default, { name: 'foo' })
      ),
      _react2.default.createElement(
        'td',
        null,
        _react2.default.createElement(
          'p',
          null,
          'bar'
        )
      )
    ))).toBe(true);
  });

  it('should handle onSelect', function () {
    var onSelect = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_.EnhancedOption, { value: 'foo', label: 'bar', onSelect: onSelect }));
    expect(onSelect.mock.calls.length).toBe(0);
    wrapper.simulate('click', {
      preventDefault: function preventDefault() {}
    });
    expect(onSelect.mock.calls.length).toBe(1);
  });
});