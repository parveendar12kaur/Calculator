'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalSizes = undefined;
exports.PureModal = PureModal;
exports.ModalHeader = ModalHeader;
exports.ModalBody = ModalBody;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _modal = require('../../scss/_particles/extras/_modal.scss');

var _modal2 = _interopRequireDefault(_modal);

var _buttons = require('../../scss/_particles/components/_buttons.scss');

var _buttons2 = _interopRequireDefault(_buttons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* global document */


var ModalSizes = exports.ModalSizes = {
  Large: 'large',
  Medium: 'medium',
  Small: 'small'
};

function onModalToggle(toggle) {
  return function handleToggle(node) {
    if (typeof node !== 'undefined') {
      document.body.classList.add(_modal2.default['modal-open']);
    } else {
      document.body.classList.remove(_modal2.default['modal-open']);
    }
    if (toggle) {
      toggle(node);
    }
  };
}

function Modal(props) {
  return _react2.default.createElement(
    _reactPortal2.default,
    {
      isOpened: props.isOpen,
      openByClickOn: props.openByClickOn,
      closeOnEsc: props.closeOnEsc,
      onOpen: onModalToggle(props.onOpen),
      beforeClose: props.beforeClose,
      onClose: onModalToggle(props.onClose),
      onUpdate: props.onUpdate
    },
    _react2.default.createElement(
      PureModal,
      {
        alternate: props.alternate,
        style: props.style,
        size: props.size,
        onClose: props.onClose
      },
      props.children
    )
  );
}

Modal.propTypes = {
  isOpen: _propTypes2.default.bool,
  openByClickOn: _propTypes2.default.element.isRequired,
  closeOnEsc: _propTypes2.default.bool,
  onOpen: _propTypes2.default.func,
  beforeClose: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  onUpdate: _propTypes2.default.func,
  alternate: _propTypes2.default.bool,
  size: _propTypes2.default.oneOf(Array.from(Object.keys(ModalSizes), function (v) {
    return ModalSizes[v];
  })),
  style: _propTypes2.default.shape(),
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
};

Modal.defaultProps = {
  isOpen: false,
  closeOnEsc: true,
  onOpen: null,
  beforeClose: null,
  onClose: null,
  onUpdate: null,
  alternate: false,
  size: ModalSizes.Medium,
  style: {},
  children: null
};

function PureModal(props) {
  var _classNames;

  return _react2.default.createElement(
    'div',
    {
      className: (0, _classnames2.default)(_modal2.default['tsla-modal'], (_classNames = {}, _defineProperty(_classNames, _modal2.default['alternate'], props.alternate), _defineProperty(_classNames, _modal2.default['' + props.size], !!props.size), _classNames)),
      style: { display: 'block' }
    },
    _react2.default.createElement(
      'div',
      { className: _modal2.default['tsla-modal--dialog'], style: props.style },
      _react2.default.createElement(
        'div',
        { className: _modal2.default['tsla-modal--content'] },
        _react2.default.createElement(
          'button',
          {
            className: (0, _classnames2.default)(_buttons2.default['btn-close'], _modal2.default['tsla-modal--close']),
            onClick: props.onClose || props.closePortal
          },
          '\xD7'
        ),
        props.children
      )
    )
  );
}

PureModal.propTypes = {
  onClose: _propTypes2.default.func,
  closePortal: _propTypes2.default.func,
  alternate: _propTypes2.default.bool,
  size: _propTypes2.default.oneOf(Array.from(Object.keys(ModalSizes), function (v) {
    return ModalSizes[v];
  })),
  style: _propTypes2.default.shape(),
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
};

PureModal.defaultProps = {
  alternate: false,
  onClose: null,
  closePortal: null,
  size: ModalSizes.Medium,
  style: {},
  children: null
};

function ModalHeader(props) {
  return _react2.default.createElement(
    'div',
    { className: _modal2.default['tsla-modal--header'], style: props.style },
    props.title && _react2.default.createElement(
      'h4',
      { className: _modal2.default['tsla-modal--title'] },
      props.title
    ),
    props.children
  );
}

ModalHeader.propTypes = {
  title: _propTypes2.default.string,
  style: _propTypes2.default.shape(),
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
};

ModalHeader.defaultProps = {
  title: null,
  style: {},
  children: null
};

function ModalBody(props) {
  return _react2.default.createElement(
    'div',
    { className: _modal2.default['tsla-modal--body'], style: props.style },
    props.children
  );
}

ModalBody.propTypes = {
  style: _propTypes2.default.shape(),
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
};

ModalBody.defaultProps = {
  style: {},
  children: null
};

exports.default = Modal;