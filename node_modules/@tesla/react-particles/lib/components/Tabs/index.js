'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabContent = exports.PureTabs = undefined;
exports.TabDrawer = TabDrawer;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _recompose = require('recompose');

var _reactThemeable = require('react-themeable');

var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

var _tabs = require('../../scss/_particles/extras/_tabs.scss');

var _tabs2 = _interopRequireDefault(_tabs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var enhance = (0, _recompose.compose)(
// tab selection with built in state and default props selector
(0, _recompose.withState)('selected', 'selectTab', function (props) {
  if (Array.isArray(props.children)) {
    var selectedIndex = props.children.findIndex(function (child) {
      return child.props.selected;
    });
    return selectedIndex >= 0 ? selectedIndex : 0;
  }
  return 0;
}), (0, _recompose.withHandlers)({
  // handler for input change event
  onTabChange: function onTabChange(props) {
    return function (e) {
      var selectedIndex = parseInt(e.target.value, 10);
      props.selectTab(selectedIndex);
      // if onChange is set, call it
      if (props.onChange) {
        props.onChange(selectedIndex);
      }
    };
  }
}));

function Tabs(props) {
  var children = Array.isArray(props.children) ? props.children : [props.children];
  var theme = (0, _reactThemeable2.default)(props.theme || {});

  return _react2.default.createElement(
    'div',
    {
      className: (0, _classnames2.default)(_tabs2.default['tsla-tabs'], theme('tsla-tabs', 'tsla-tabs').className || '')
    },
    children.map(function (child, key) {
      return [_react2.default.createElement('input', {
        type: 'radio',
        name: 'tsla-tabs',
        className: _tabs2.default['tsla-tabs--radio'],
        id: 'tsla-tab-' + key,
        value: key,
        checked: props.selected === key,
        onChange: props.onTabChange
      }), _react2.default.createElement(
        'label',
        {
          className: (0, _classnames2.default)(_tabs2.default['tsla-tabs--label'], theme('tsla-tabs--label', 'tsla-tabs--label').className || ''),
          htmlFor: 'tsla-tab-' + key
        },
        child.props.title
      ), _react2.default.createElement(
        TabDrawer,
        { theme: props.theme },
        child.props.children
      )];
    })
  );
}

Tabs.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  selected: _propTypes2.default.number,
  onTabChange: _propTypes2.default.func,
  theme: _propTypes2.default.object
};

Tabs.defaultProps = {
  children: null,
  selected: null,
  onTabChange: function onTabChange() {}
};

exports.PureTabs = Tabs;
function TabDrawer(props) {
  var theme = (0, _reactThemeable2.default)(props.theme || {});

  return _react2.default.createElement(
    'div',
    {
      className: (0, _classnames2.default)(_tabs2.default['tsla-tabs--drawer'], theme('tsla-tabs--drawer', 'tsla-tabs--drawer').className || '')
    },
    props.children
  );
}

TabDrawer.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  theme: _propTypes2.default.object
};

TabDrawer.defaultProps = {
  children: null
};

// Create a sink for TabContent.
// Note #1: Since React components cannot return array of components (yet),
// we simulate an empty stateless "Sink" component with name "TabContent"
// and have it pass props via <TabContent /> declaration.
// Note #2: If we don't give it a name, then our propTypes checker will
// not work. So we create a HOC to give it a name, using `setDisplayName`.
// (It's bit of a hack, but until we get React Fiber, this will do.)
var TabContent = (0, _recompose.setDisplayName)('TabContent')((0, _recompose.createSink)(function (props) {
  return props;
}));

TabContent.propTypes = {
  title: _propTypes2.default.string.isRequired,
  selected: _propTypes2.default.bool
};

exports.TabContent = TabContent;


var EnhancedTabs = enhance(Tabs);

EnhancedTabs.propTypes = {
  onChange: _propTypes2.default.func
};

exports.default = EnhancedTabs;