'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global describe, it, expect, jest, document, beforeEach */
describe('<ModalHeader />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.ModalHeader, null)).matchesElement(_react2.default.createElement('div', { className: 'tsla-modal--header' })));
  });

  it('should support title', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.ModalHeader, { title: 'foo bar' })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal--header' },
      _react2.default.createElement(
        'h4',
        { className: 'tsla-modal--title' },
        'foo bar'
      )
    )));
  });

  it('should support children', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _.ModalHeader,
      null,
      _react2.default.createElement(
        'p',
        null,
        'Foo'
      )
    )).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal--header' },
      _react2.default.createElement(
        'p',
        null,
        'Foo'
      )
    )));
  });
});

describe('<ModalBody />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.ModalBody, null)).matchesElement(_react2.default.createElement('div', { className: 'tsla-modal--body' })));
  });

  it('should support children', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(
      _.ModalBody,
      null,
      _react2.default.createElement(
        'p',
        null,
        'Foo!'
      )
    )).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal--body' },
      _react2.default.createElement(
        'p',
        null,
        'Foo!'
      )
    )));
  });
});

describe('<PureModal />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureModal, null)).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal medium' },
      _react2.default.createElement(
        'div',
        { className: 'tsla-modal--dialog' },
        _react2.default.createElement(
          'div',
          { className: 'tsla-modal--content' },
          _react2.default.createElement(
            'button',
            { className: 'btn-close tsla-modal--close' },
            '\xD7'
          )
        )
      )
    ))).toBe(true);
  });

  it('should support alternate styling', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureModal, { alternate: true })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal alternate medium' },
      _react2.default.createElement(
        'div',
        { className: 'tsla-modal--dialog' },
        _react2.default.createElement(
          'div',
          { className: 'tsla-modal--content' },
          _react2.default.createElement(
            'button',
            { className: 'btn-close tsla-modal--close' },
            '\xD7'
          )
        )
      )
    ))).toBe(true);
  });

  it('should support additional sizes', function () {
    var types = Array.from(Object.keys(_.ModalSizes), function (v) {
      return _.ModalSizes[v];
    });
    types.forEach(function (type) {
      expect((0, _enzyme.shallow)(_react2.default.createElement(_.PureModal, { size: type })).is('.' + type)).toBe(true);
    });
  });
});

describe('<Modal />', function () {
  beforeEach(function () {
    document.body.className = '';
  });

  it('should render without throwing an error', function () {
    // since by default Portal doesn't return any elements, its 
    // difficult to test without messing with DOM.
    // we "mount" it, then grab children instance to validate this.
    expect((0, _enzyme.shallow)((0, _enzyme.mount)(_react2.default.createElement(
      _2.default,
      {
        openByClickOn: _react2.default.createElement(
          _Button2.default,
          null,
          'Foo'
        )
      },
      _react2.default.createElement(
        _.ModalBody,
        null,
        _react2.default.createElement(
          'p',
          null,
          'Hello world'
        )
      )
    )).instance().props.children).matchesElement(_react2.default.createElement(
      'div',
      { className: 'tsla-modal--body' },
      _react2.default.createElement(
        'p',
        null,
        'Hello world'
      )
    ))).toBe(true);
  });

  it('should handle onOpen', function () {
    var onOpen = jest.fn();
    expect(onOpen.mock.calls.length).toBe(0);
    var modal = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { openByClickOn: _react2.default.createElement(
        _Button2.default,
        null,
        'Foo'
      ), onOpen: onOpen }));
    modal.find('button').simulate('click');
    expect(onOpen.mock.calls.length).toBe(1);
  });

  it('should handle toggle', function () {
    expect(document.body.classList.contains('modal-open')).toBe(false);
    var modal = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { openByClickOn: _react2.default.createElement(
        _Button2.default,
        null,
        'Foo'
      ) }));
    modal.setProps({ isOpen: true });
    expect(document.body.classList.contains('modal-open')).toBe(true);
    modal.setProps({ isOpen: false });
    expect(document.body.classList.contains('modal-open')).toBe(false);
  });
});