'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Select />', function () {
  it('should render without throwing an error', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, { name: 'foo', label: 'bar' })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'select',
          { name: 'foo', className: 'form-select' },
          _react2.default.createElement(
            'option',
            null,
            'Empty'
          )
        )
      )
    ))).toBe(true);
  });

  it('should render options', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, {
      name: 'foo',
      label: 'bar',
      options: [{
        value: 'foo',
        label: 'foo'
      }, {
        value: 'bar',
        label: 'bar'
      }]
    })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'select',
          { name: 'foo', className: 'form-select' },
          _react2.default.createElement(
            'option',
            { key: 'foo', value: 'foo' },
            'foo'
          ),
          _react2.default.createElement(
            'option',
            { key: 'bar', value: 'bar' },
            'bar'
          )
        )
      )
    ))).toBe(true);
  });

  it('should have a default value', function () {
    expect((0, _enzyme.shallow)(_react2.default.createElement(_2.default, {
      name: 'foo',
      label: 'bar',
      options: [{
        value: 'foo',
        label: 'foo'
      }, {
        value: 'bar',
        label: 'bar'
      }],
      selectedValue: 'foo'
    })).matchesElement(_react2.default.createElement(
      'div',
      { className: 'form-item form-type-select' },
      _react2.default.createElement(
        'label',
        { htmlFor: 'foo', className: 'form-label' },
        'bar'
      ),
      _react2.default.createElement(
        'span',
        { className: 'form-select-overlay' },
        _react2.default.createElement(
          'select',
          { name: 'foo', className: 'form-select', value: 'foo' },
          _react2.default.createElement(
            'option',
            { key: 'foo', value: 'foo' },
            'foo'
          ),
          _react2.default.createElement(
            'option',
            { key: 'bar', value: 'bar' },
            'bar'
          )
        )
      )
    ))).toBe(true);
  });

  it('should trigger onChange', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_2.default, {
      name: 'foo',
      options: [{
        value: 'foo',
        label: 'foo'
      }, {
        value: 'bar',
        label: 'bar'
      }],
      onChange: onChange
    }));
    // simulate change
    expect(onChange.mock.calls.length).toBe(0);
    wrapper.find('select').simulate('change', { target: { value: 'foo' } });
    expect(onChange.mock.calls.length).toBe(1);
  });
}); /* global describe, it, expect, jest */