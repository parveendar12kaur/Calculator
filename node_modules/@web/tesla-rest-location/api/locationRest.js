// Restful interface for Location API
var url = require("url"),
    version = require('../package.json').version,
    _ = require('lodash'),
    Location = require('./location.js');

/**
 * HTTP GET /location/version/isvalidatzipcode/
 * Check whether the given zipcode is validated by the specific country
 * @param countryCode {String} country code
 * @param zipcode {String} zipcode
 * @return {Boolean}
 */

module.exports = function(envConfig){

    return {

        getValidatedZipCode: {
            spec: {
                description:      "Check whether the given zipcode is validated by the specific country",
                path:             "/location/v" + version + "/isvalidzipcode/",
                method:           "GET",
                summary:          "",
                notes:            "",
                type:             "",
                nickname:         "zipcodeGet",
                produces:         ["zipcodeGet"],
                parameters:       [
                    {
                        "name":           "country",
                        "description":  "country code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "US"
                    },
                    {
                        "name":           "zipcode",
                        "description":  "zipcode",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "95051"
                    }
                ],
                responseMessages: [
                    {
                        "code":    400,
                        "message": "Please provide valid parameters"
                    }
                ]
            },

            action: function(req, res){

                // Parse Input Parameters from Request
                var params = url.parse(req.url, true).query,
                    countryCode = params.country,
                    zipcode = params.zipcode;

                // Basic Paramters Validation Checking and Error Handling
                if( !countryCode || !zipcode ){

                    res.status(400).send({"err": "Please provide a valid parameters"});

                }
                else{
                    return res.send(Location.validateZipcode(countryCode, zipcode))
                }
            }
        },

        /**
         * HTTP GET /location/version/statelist/
         *
         * Get state list by given countryCode @see CountryAddressList
         * @param countryCode {String} country code
         * @return {Object}
         */
        getStateList: {
            spec: {
                description:      "Get state list by given countryCode",
                path:             "/location/v" + version + "/statelist/",
                method:           "GET",
                summary:          "",
                notes:            "",
                type:             "",
                nickname:         "stateGet",
                produces:         ["stateGet"],
                parameters:       [
                    {
                        "name":           "country",
                        "description":  "ISO Country Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "US"
                    }
                ],
                responseMessages: [
                    {
                        "code":    400,
                        "message": "Please provide a valid Country Code"
                    }
                ]
            },

            action: function(req, res){

                // Parse Input Parameters from Request
                var params = url.parse(req.url, true).query,
                    countryCode = params.country || params.countryCode;

                // Basic Paramters Validation Checking and Error Handling
                if(!countryCode){
                    res.status(400).send({"err": "Please provide a valid country code"});
                }
                else{

                    var stateList = Location.getStateList(countryCode);
                    if(_.isEmpty(stateList)){
                        res.send({
                            "code":    400,
                            "message": "No States found for Country Code " + countryCode
                        });
                    }
                    else{
                        res.send(stateList);
                    }
                }
            }
        },

        /**
         * HTTP GET /location/version/citylist/
         * Get city list by given countryCode @see CountryAddressList
         * @param countryCode {String} country code
         * @return {Object}
         */
        getCityList: {
            spec: {
                description:      "Get City List by given country code and statecode ",
                path:             "/location/v" + version + "/citylist/",
                method:           "GET",
                summary:          "Pass countryCode then stateCode",
                notes:            "",
                type:             "",
                nickname:         "stateGet",
                produces:         ["stateGet"],
                parameters:       [
                    {
                        "name":         "country",
                        "description":  "ISO Country Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "CN"
                    },
                    {
                        "name":         "state",
                        "description":  "State Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "北京"

                    }
                ],
                responseMessages: [
                    {
                        "code":    400,
                        "message": "Please provide a valid parameters"
                    }
                ]
            },

            action: function(req, res){

                // Parse Input Parameters from Request
                var params = url.parse(req.url, true).query,
                    countryCode = params.country,
                    stateCode = params.state;

                // Basic Paramters Validation Checking and Error Handling
                if(!countryCode && !stateCode ){
                    res.status(400).send({"err": "Please validate you're sending correct country and state codes"});
                }
                else{

                    var cityList = Location.getCityList(countryCode, stateCode);
                    if(_.isEmpty(cityList)){
                        res.send({
                            "code":    400,
                            "message": "No States found for Country Code " + countryCode + " and stateCode " + stateCode
                        });
                    }
                    else{
                        res.send(cityList);
                    }
                }
            }
        },

        /**
         * HTTP GET /location/version/districtlist/
         * Get district list by given countryCode @see CountryAddressList
         * @param countryCode {String} country code
         * @return {Object}
         */
        getDistrictList: {
            spec: {
                description:      "Get District List by given country code ",
                path:             "/location/v" + version + "/districtlist/",
                method:           "GET",
                summary:          "",
                notes:            "",
                type:             "",
                nickname:         "districtGet",
                produces:         ["districtGet"],
                parameters:       [
                    {
                        "name":         "country",
                        "description":  "ISO Country Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "CN"
                    },
                    {
                        "name":         "state",
                        "description":  "State Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "北京"
                    },
                    {
                        "name":         "city",
                        "description":  "City Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "北京"
                    }
                ],
                responseMessages: [
                    {
                        "code":    400,
                        "message": "Please provide a valid paramters"
                    }
                ]
            },

            action: function(req, res){

                // Parse Input Parameters from Request
                var params = url.parse(req.url, true).query,
                    countryCode = params.country,
                    stateCode = params.state,
                    cityCode = params.city;

                // Basic parameter validation and error handling
                if(!countryCode || !stateCode || !cityCode){
                    res.status(400).send({"err": "Please validate your parameters"});
                }
                else{

                    var districtlist = Location.getDistrictList(countryCode, stateCode, cityCode);
                    if(_.isEmpty(districtlist)){
                        res.send({
                            "code":    400,
                            "message": "No States found for country code " + countryCode + " state code " + stateCode + " city code " + cityCode
                        });
                    }
                    else{
                        res.send(districtlist);
                    }
                }
            }
        },

        /**
         * HTTP GET /location/version/languagelist/
         * Get language list by given countryCode @see CountryAddressList
         * @param countryCode {String} country code
         * @return {Array}  default is {'EN': 'English'}
         */
        getLanguageList: {
            spec: {
                description:      "Get language list by given countryCode",
                path:             "/location/v" + version + "/languagelist/",
                method:           "GET",
                summary:          "@return {Array}  default is {'EN': 'English'}",
                notes:            "",
                type:             "",
                nickname:         "languageGet",
                produces:         ["languageGet"],
                parameters:       [
                    {
                        "name":         "country",
                        "description":  "ISO Country Code",
                        "required":     true,
                        "type":         "string",
                        "paramType":    "query",
                        "defaultValue": "US"
                    }
                ],
                responseMessages: [
                    {
                        "code":    400,
                        "message": "Please provide a valid IP Address"
                    }
                ]
            },

            action: function(req, res){

                // Parse Input Parameters from Request
                var params = url.parse(req.url, true).query;
                var countryCode;
                params.country === undefined ? countryCode = undefined : countryCode = params.country;

                // Basic parameter validation and error handling
                if(countryCode === undefined){
                    res.status(400).send({"err": "Please validate you're passing correct parameters "});
                }
                else{
                    res.send(Location.getLanguageList(countryCode));
                }
            }
        }
    };
};
