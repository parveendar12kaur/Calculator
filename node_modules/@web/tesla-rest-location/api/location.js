/**
 * This is a module which can export location informations per specific country
 * The data is store in plain json files @see ./data/*.json
 */
var _ = require('lodash'),
	//This file based on https://restcountries.eu/ and will merge all required data from Drupal tesla.locale.inc
	ISOCountryList = require('./../data/ISOCountryList.json'),
	//This file stores address map for some countries, we can update the data to support more countries
	CountryAddressList = require('./../data/CountryAddressList.json');

/**
 * Utility object which supplies meta data accessing method per country code
 */
var Location = {
	/**
	 * Get counties object with countryCode as key and countryName as value @see ISOCountryList
	 * @return {Object}
	 */
	getISOCountryList: function() {
		return _.reduce(ISOCountryList, function(result, country, countryCode) {
		  	result[countryCode] = country.name;
		  	return result;
		}, {});
	},

	/**
	 * Get address object which may contains states/cities/districts @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {object}
	 */
	getAddressByCountryCode: function(countryCode) {
		return CountryAddressList[countryCode] || {};
	},

	/**
	 * Generic method to check the existence of given countryCode and attribute
	 * @param countryCode {String} country code
	 * @param attribute {String} the attribut name we want to check
	 * @return {Boolean}
	 */
	checkCountryAttribute: function(countryCode, attribute) {
		return !!(ISOCountryList[countryCode] && ISOCountryList[countryCode][attribute]);
	},

	/**
	 * Generic method to get the attribute value by given countryCode
	 * @param countryCode {String} country code
	 * @param attribute {String} attribut name
	 * @return {Object|Array|*}
	 */
	getCountryAttribute: function(countryCode, attribute) {
		return ISOCountryList[countryCode] ? ISOCountryList[countryCode][attribute] : {};
	},

	/**
	 * Check whether the given country contains state list  @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Boolean}
	 */
	isStateListEnabled: function(countryCode) {
		return Location.checkCountryAttribute(countryCode, 'supportStateList');
	},

	/**
	 * Check whether the given country contains city list  @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Boolean}
	 */
	isCityListEnabled: function(countryCode) {
		return Location.checkCountryAttribute(countryCode, 'supportCityList');
	},

	/**
	 * Check whether the given country contains district list  @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Boolean}
	 */
	isDistrictListEnabled: function(countryCode) {
		return Location.checkCountryAttribute(countryCode, 'supportDistrictList');
	},

	/**
	 * Check whether the given country support zipcode
	 * @param countryCode {String} country code
	 * @return {Boolean}
	 */
	isZipcodeEnabled: function(countryCode) {
		return Location.checkCountryAttribute(countryCode, 'zipcode');
	},

	/**
	 * Check whether the given zipcode is validated by the specific country
	 * @param countryCode {String} country code
	 * @param zipcode {String} zipcode
	 * @return {Boolean}
	 */
	validateZipcode: function(countryCode, zipcode) {
		var validateResult = true;
		if (Location.isZipcodeEnabled(countryCode)) {
			var zipCodeRegExp = new RegExp(ISOCountryList[countryCode].zipcode);
			validateResult = zipCodeRegExp.test(zipcode);
		}
		return validateResult;
	},

	/**
	 * Get state list by given countryCode @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Object}
	 */
	getStateList: function(countryCode) {
		if (Location.isCityListEnabled(countryCode)) {
			return _.reduce(_.keys(CountryAddressList[countryCode]), function(result, state) {
				result[state] = state;
				return result;
			}, {});
		} 
		else if (Location.isStateListEnabled(countryCode)) {
			return CountryAddressList[countryCode];
		}
		return {};
	},

	/**
	 * Get city list by given countryCode @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Object}
	 */
	getCityList: function(countryCode, stateCode) {
		var cityList = {};
		if (Location.isStateListEnabled(countryCode) && Location.isCityListEnabled(countryCode)) {
			stateCode = stateCode || _.keys(Location.getStateList(countryCode))[0];
			if (Location.isDistrictListEnabled(countryCode)) {
				cityList = _.reduce(_.keys(CountryAddressList[countryCode][stateCode]), function(result, city) {
					result[city] = city;
					return result;
				}, {});
			}
			else {
				cityList = CountryAddressList[countryCode][stateCode] || {};
			}
		}

		return cityList;
	},

	/**
	 * Get district list by given countryCode @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Object}
	 */
	getDistrictList: function(countryCode, stateCode, cityCode) {
		var districtList = {};
		if (Location.isStateListEnabled(countryCode) && Location.isCityListEnabled(countryCode) && Location.isDistrictListEnabled(countryCode)) {
			stateCode = stateCode || _.keys(Location.getStateList(countryCode))[0];
			cityCode = cityCode || _.keys(Location.getCityList(countryCode, stateCode))[0];
			districtList = CountryAddressList[countryCode][stateCode][cityCode] || {};
		}
		return districtList;
	},

	/**
	 * Get language list by given countryCode @see CountryAddressList
	 * @param countryCode {String} country code
	 * @return {Array}  default is {'EN': 'English'}
	 */
	getLanguageList: function(countryCode) {
		var languages = Location.getCountryAttribute(countryCode, 'languages');
		return _.isEmpty(languages) ? {'EN': 'English'} : languages;
	}
};

module.exports = Location;