/**
 * configToJson.js
 * 
 * Converts a standard config file to JSON
 *
 * turns:
 *
 *     #some comment
 *     MONGODB_URL = mongodb://localhost:27017/my-mongo-db-name
 *     #some other comment
 *     OTHER_SERVICE_URL = http://someserver.teslamotors.com/api/blah/blah
 *
 * into:
 *    {
 *        MONGODB_URL: "mongodb://localhost:27017/my-mongo-db-name",
 *        OTHER_SERVICE_URL: "http://someserver.teslamotors.com/api/blah/blah"
 *    }
 *
 *  @author Frank Young
 * 
 */

module.exports = {

    /**
     * Parses standard config file format to json
     * Allows for variables defined earlier in file to be used in values of vars defined later in the file
     * 
     * @param  {String} cfg String contents of cfg file
     * @return {Object}     JSON representation of cfg file
     */
	parse: function(cfg){

		var output = {};
        var lines = cfg.split("\n");

        for(var i = 0, n = lines.length; i < n; i++){

            // trim string
        	var line = lines[i].trim();
        	var pair, key, value;

            // skip line if it is empty or begins with a comment # (hash)
        	if(line.length && line.indexOf("#") !== 0){

	            pair = line.split("=");

	            if(pair.length > 1){

	                key = pair[0].trim();	            	
	                value = pair[1].trim();

                    // check to see if the value uses a previous key as variable
                    var matches = value.match(/(\$\w)+/g);

                    if(matches){

                    	for(var p in output){

                            var re = new RegExp(p, "g");
                            matches = value.match(re);

                    		if(matches){                               
                    			value = value.replace("$" + p, output[p]);
                                break;
                    		}
                    	}
                    }

                    // add key/value pair to the json object
	               output[key] = value;
	            }
        	}
        }
      
        return output;
	},

    /**
     * Loads config file and returns a json in callback
     * @param  {String}   cfgPath  path to config file
     * @param  {Function} callback 
     */
	get: function(cfgPath, callback){

		var fs = require("fs");

		fs.readFile(cfgPath, "utf-8", function read(err, data){
            
            if(!err){
                callback(err, this.parse(data));
            }
            else{
            	callback(err);
            }

		}.bind(this));
	}
};

