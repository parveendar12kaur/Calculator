var _ = require("lodash");

/**
 * Simple CSV to JSON converter
 *
 * Takes a CSV file and returns an array of objects (if opts.fieldsInFirstRow) is set 
 * or an array of arrays if there is no header row
 *
 * Caveats: Does not yet handle unquoted csv fields with spaces in them
 *
 * @author Frank Young
 */


/**
 * Formats header row
 * @param  {Array} cols [description]
 * @param  {Object} opts [description]
 * @return {Array} array of formatted column headings
 */
function __formatHeaderRow(cols, opts) {

    // format columns into valid json keys (remove spaces, etc...)
    for (var i = 0, n = cols.length; i < n; i++) {
        col = cols[i];
        // trim col names        
        //col = col.trim();
        // convert spaces to underscores
        col = col.replace(/\s/g, "_");
        // remove other weird stuff
        col = col.replace(/[\$//]/g, "");
        col = col.toLowerCase();

        if(opts.columnNameRegex){
            col = col.replace(opts.columnNameRegex, "");
        }

        cols[i] = col;
    }

    return cols;
}

/**
 * Determine eol character
 * @param  {string} data
 */
function __getEol(data){

    for(var i = 0, n = 9999; i < n; i++){
         if(data[i] === "\n"){
            return "\n";
         }
         else if(data[i] === "\r"){
             return "\r";
         }
    }
}

/**
 * CSV to JSON conversion method
 * @param  {String} csv  - expects comma separated values by default, but can support other delimiters
 * @param  {Object} opts - optional options object [rowDelimiter, colDelimiter, fieldsInFirstRow]
 * @return {Object} JSON object
 */
module.exports = function(csv, opts) {

    if (_.isEmpty(csv)) {
        new Error("CSV is empty");
    }  

    opts = opts || {};

    var rowDelimiter = opts.rowDelimiter || __getEol(csv);
    // split on comma, but not if it is found within double-quotes, like in formatted prices "$4,123" etc
    var colDelimiter = opts.colDelimiter || /,(?=(?:(?:[^"]*"){2})*[^"]*$)/;
    var fieldsInFirstRow = opts.fieldsInFirstRow;

    var table = [];
    var rows = csv.split(rowDelimiter);
    var headerRow;

    if(fieldsInFirstRow){
        headerRow = __formatHeaderRow(rows.shift().split(colDelimiter), opts);
    }

    for (var i = 0, n = rows.length; i < n; i++) {

        var rowData = headerRow ? {} : [],
            row = rows[i],
            cols = row.split(colDelimiter);

        for (var j = 0, m = cols.length; j < m; j++) {

            // clean nested quotes            
            cols[j] = cols[j].replace(/"/g,"");

            if(opts.cleanValueRegex){
                cols[j] = cols[j].replace(opts.cleanValueRegex,""); 
            }

            if(opts.valueFormat === "number"){
                cols[j] = parseFloat(cols[j]);
            }

            if (headerRow) {
                rowData[headerRow[j]] = cols[j];
            }
            else{
                rowData.push(cols[j]);
            }
        }

        table.push(rowData);
    }

    return table;
};
