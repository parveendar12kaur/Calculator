'use strict./';
const url = require('url');
const Logger = require('../common/Logging');
const json = require('morgan-json');
const winston = require('winston'),
    morgan = require('morgan'),
    fs = require('fs'),
    path = require('path'),
    _ = require('lodash');


// log level constants
const INFO = 'info';
const ERROR = 'error';
const DEBUG = 'debug';
const WARN = 'warn';

const jsonFormat = json({
    method:':method',
    path: ':path',
    status: ':status',
    query: ':query',                
    length: ':res[content-length]',
    responseTime: ':response-time ms'
});


/**
  Custom Logger Middleware class
  Wraps winston and morgan middleware for easy usage.

  Writes logs to file paths defined in an env file.
  Files must exist and be writable by node.

  Useful Links:
    https://github.com/expressjs/morgan
    https://github.com/winstonjs/winston
    
  Sample Usage:
  let TeslaLogger = require('@web/tesla-utils').middleware.TeslaLogger;
      logger = new TeslaLogger({
        format: 'test',
        logs: {
          infoLog: '/var/log/geoip-ifo.log',
          errorLog: '/var/log/geoip-error.log'
        }
      });
  app.use(logger.log());

  @authors Cameron Dart, Frank Young
*/
class TeslaExpressLogger {

    constructor(env) {

        let consoleLogging = process.env.LOG_LEVEL === DEBUG;

        this.__initErrors = [];
        this.__loggingEnabled = true;
        this.__transports = [];
        this.__exceptionHandlers = [];

        // initialize log files
        for (let p in env.logs) {
            if (env.logs[p] === 'console') {
                consoleLogging = true;
            }
            else {
                const dirPath = path.dirname(env.logs[p]);
                // check if directory exists
                if (this.__checkPermission(dirPath, 4)) {
                    // check if it is writable
                    if (!this.__canWriteLogs(env.logs[p])) {
                        this.__loggingEnabled = false;
                        this.__initErrors.push(`Log directory not writable, please check permissions for ${dirPath}`);
                        break;
                    }
                }
                else {
                    this.__loggingEnabled = false;
                    this.__initErrors.push(`${dirPath} not writable, check permissions`)
                }
            }
        }

        if (this.__loggingEnabled) {
            // add transports
            if (env.logs.infoLog) {
                this.__addTransport(INFO, 'log', env.logs.infoLog);
            }
            if (env.logs.errorLog) {
                this.__exceptionHandlers.push(new winston.transports.File({
                    filename: env.logs.errorLog
                }));
            }
            if (consoleLogging) {
                this.__addTransport(INFO, 'console', env.logs.infoLog);
            }
            // instantiate logger
            this.__logger = new winston.Logger({
                transports: this.__transports,
                exceptionHandlers: this.__exceptionHandlers,
                exitOnError: true
            });
            this.__logger.on('error', this.__handleException)
            // don't emit errors by default
            // winston.emitErrs = env.emitErrs || true;
        }
        else {
            if (this.__initErrors.length) {
                Logger.warn('TeslaExpressLogger', 'LOGGING DISABLED!!');
                Logger.warn('TeslaExpressLogger', JSON.stringify(this.__initErrors));
            }
        }
    }

    /**
     * Handle exceptions from Winston
     */
    __handleException(err) {
        Logger.error('TeslaExpressLogger', 'Log exception: ', err);
    }

    /**
     * Adds transport to winston
     * 
     * @param {String} level
     * @param {String} logType 
     * @param {String} fileName
     * @param {Object} any other transport props
     * @return {Array}  returns transports array
     */
    __addTransport(level, logType, fileName, props) {

        props = props || {}

        let transport;

        switch (logType) {

            case 'log':

                transport = new winston.transports.File(Object.assign({
                    level: 'info',
                    filename: fileName,
                    timestamp: true,
                    json: false
                }, props));

                break;

            case 'console':

                transport = new winston.transports.Console(Object.assign({
                    name: `${level}-${logType}`,
                    level: level,
                    handleExceptions: true,
                    json: false,
                    colorize: true
                }, props));

                break;
        }

        this.__transports.push(transport);
    }

    /**
     * Checks to make sure configuration is valid
     * @param  {Object}  env 
     * @return {Boolean}
     */
    __isValidConfig(env) {

        if (!(env.logs && env.logs.infoLog && env.logs.errorLog)) {
            return false
        }

        return true;
    }


    /**
     * Create Directory
     * @param  {String} dirPath [path or directory to be created]
     * @throws {Exception} -- if directory cannot be created
     */
    __createLogDir(dirPath) {
        fs.mkdirSync(dirPath);
    }

    /**
     * Check file perm
     * @param  {String}   file file path
     * @param  {Integer}  mask [2 = canWrite, 4 = canRead]
     * @param  {Function} cb   [description]
     * @return {Boolean}
     */
    __checkPermission(file, mask) {
        try {
            const stats = fs.statSync(file);
            return (mask & parseInt((stats.mode & parseInt("777", 8)).toString(8)[0]));
        }
        catch (err) {
            // console.log(err);
            return false
        }
    }

    /**
     * Checks for existence of log directory, and if it has read+write permissions
     * @param  {String} logPath // path to log file
     * @return {Boolean} -- true/false
     */
    __canWriteLogs(logPath) {

        if (this.__checkPermission(logPath, 2)) {
            // success
            return true;
        }
        else {
            // file does not exist, try to create it
            try {
                fs.writeFileSync(logPath, '', 'utf8');
                return true;
            }
            catch (err) {
                this.__initErrors.push(`cannote create ${logPath}`);
                this.__initErrors.push(`-- LOGGING NOT ENABLED --`);
                return false
            }
        }
    }

    // -- PUBLIC -------------------------------------------------------------------

    /**
     * Implements logging middleware for express. Check sample usage above constructor
     * Returns middleware function for express to log access and exceptions
     * 
     * @return {Function} 
     */
    log() {
        if (this.__loggingEnabled) {

            morgan.token('query', function(req) {
                return JSON.stringify(url.parse(req.originalUrl || req.url, true).query);
            });

            morgan.token('path', function(req) {
                return req.path;
            });
            
            const fmt = morgan.compile(':method :path :status :query :length :response-time ms')

            return morgan(function (tokens, req, res) {
                return _.reduce({
                  method: tokens.method(req, res),
                  path: tokens.path(req, res),
                  status: tokens.status(req, res),
                  query: tokens.query(req, res),
                  contentLength: tokens.res(req, res, 'content-length'),
                  responseTime: tokens['response-time'](req, res)
                }, (r, v, k)=>{
                   r.push(`${k}=${v}`)
                   return r;
                }, []).join(",");
            }, {
              stream: {
                write: (message) => {
                    this.__logger.info(message ? message.trim() : "");
                }
              }
            });
        }
    }
}

module.exports = TeslaExpressLogger;
