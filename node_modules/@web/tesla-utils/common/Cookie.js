var forOwn = require('lodash/forOwn');

/**
 * Cookie Parser for Node & Browser
 *
 * @author Frank Young
 * 
 * @param {Object} request (optional) - if using on Node, the request object you want to inspect for cookies
 * @constructor
 */
function Cookie(request){
    // default expires equal to hour
    this.__defaultExpires = 1000 * 60 * 60;
    var cookies = this.parse(request);
    this.serialize(cookies);
};


/**
 * Stringified cookie list
 * @return {String}
 */
Cookie.prototype.serialize = function(cookies){
    forOwn(cookies, function(val, key){
       document.cookie = key + "=" + val;       
    })
} 


/**
 * Parse document or request cookies
 * @param request (Optional, node request)
 * @returns {Object
 */
Cookie.prototype.parse = function(request){

    var list = {},
        cookieString;

    if(request && request.headers && request.headers.cookie){
        cookieString = request.headers.cookie
    }
    else if(typeof window !== 'undefined' && document !== 'undefined' &&  document.cookie){
        cookieString = document.cookie;
    }

    if(cookieString){
        cookieString.split(';').forEach(function(cookie){
            var parts = cookie.split('=');
            list[parts.shift().trim()] = decodeURIComponent(parts.join('='));
        });
    }

    return list;
};

/**
 * Sets a cookie
 * @param name {String}
 * @param value
 * @param expires {Number} milliseconds
 */

Cookie.prototype.set = function(name, value, expires){

    var expiresString = '';

    if(expires){
        var date = new Date();
        date.setTime(date.getTime() + (expires || this.__defaultExpires));
        expiresString = "; expires=" + date.toGMTString();
    }

    document.cookie = name + "=" + value + expiresString + ";";
};

/**
 * Gets a cookie by name
 * @param name
 * @returns {*}
 */
Cookie.prototype.get = function(name){

    var cookies = this.parse();

    for(var p in cookies){

        if(p === name){

            var cookie = cookies[p];

            // attempt to parse as json object
            if(cookie.substring(0,1) === '{'){
                try{
                    return JSON.parse(cookie);
                }
                catch(e){
                    console.log('error trying to parse cookie named '+ name +' as json');
                }
            }

            return cookie;
        }
    }

    return null;
};

/**
 * Log cookies to console
 * @param name
 * @chainable
 */
Cookie.prototype.log = function(){
    console.log(this.parse());
};

/**
 * Remove a cookie
 * @param name
 * @chainable
 */
Cookie.prototype.remove = function(name){
    this.set(name, "", -1);
    return this;
};


module.exports = Cookie;