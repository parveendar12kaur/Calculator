var url = require('url');

function isValidIPv6(ip) {
	if (/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/.test(ip)) {
		return true;
	}
	return false;
}
function isValidIPv4(ip) {
	if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip))  {
    	return true;
	}
	return false;
}

// @link http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding-2.htm
function isMappedIPv4(ip) {
	if (/^(::|0:0:0:0:0:)(ffff)?:(?!0)((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(ip)) {
    	return true;
	}
	return false;
}

function getUnmappedIP(ip) {
    if (isMappedIPv4(ip)) {
        ip = ip.replace(/^.*:/, '');
    }
    return ip;
}

module.exports = {

	parseParams: function(request) {
	    // Get Query Params from URL and path
	    var queryParams = url.parse(request.url, true).query;
	    return queryParams;
	},

	isValidIP: function(ip) {
		if (!isValidIPv6(ip) && !isValidIPv4(ip)) {
    		return false;
    	}
    	return true;
	},

	isValidIPv4: isValidIPv4,

	isValidIPv6: isValidIPv6,

	isMappedIPv4: isMappedIPv4,

	getNormalizedIP: function(ip) {
		var response = {
			ip: getUnmappedIP(ip)
		};

		if (isValidIPv6(ip)) {
    		response.type = 'IPv6';
		}
    	else if (isValidIPv4(ip)) {
    		response.type = 'IPv4';
    	}
    	else {
    		response = false;
    	}
    	return response;
	}
}