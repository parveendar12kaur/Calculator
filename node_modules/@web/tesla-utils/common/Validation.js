
/**
 * Is the value a reservation number?
 * @param val
 * @returns {boolean}
 */
function isRN(val){
    return val && (val.match(/^RN\d{6,}$/) ? true : false);
}

/**
 * Is the value a VIN number?
 *
 * @param val
 * @returns {boolean}
 */
function isTeslaVIN(val){
    // All Tesla VINs begin with:
    var teslaVINPrefix = '5YJ';
    return val &&
           val.length >= 10 &&
           val.length < 18 &&
           val.substring(0,3) === teslaVINPrefix &&
           isAlphanumeric(val);
}

/**
 * determines whether a string is alphanumeric or not
 * @param  {String}       str to be test
 * @return {Boolean}
 */
function isAlphanumeric(str) {
    for (var char in str ) {
        var code = str.charCodeAt(char);
        if (!(code > 47 && code < 58) && // numeric (0-9)
            !(code > 64 && code < 91) && // upper alpha (A-Z)
            !(code > 96 && code < 123)) { // lower alpha (a-z)
          return false;
        }
  }
  return true;
}

module.exports = {

    isRN,
    isTeslaVIN: isTeslaVIN,
    isAlphanumeric: isAlphanumeric,

    /**
     * Tests if val is valid email
     * @param  {String} val
     * @return {Boolean}
     */
    email: function(val) {
      return /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i.test(val);
    },

    /**
     * Tests if val is numeric
     * @param  {String/Number} val
     * @return {Boolean}
     */
    number: function(val) {
      return /^[0-9]$/.test(val);
    },

    /**
     * Checks to see if passed val matches one of the entries in the values array
     * @param  {String | Number}  - val
     * @param  {Array} values - array of values to test against
     * @return {Boolean}
     */
    oneOf: function(val, values) {
      return values.indexOf(val) > -1;
    },

    /**
     * Tests if passed value is empty
     * @param  {String} val
     * @return {Boolean}
     */
    empty: function(val) {
      return val === undefined || val === null || (typeof val === 'string' && !val.length);
    },

    /**
     *  Validate VIN number
     *  @param {String} val
     *  @param {String} 2-digit locale (optional)
     *  @return {Boolean}
     *  @TO-DO: add locale-based VIN validation: US-only for now
     *  @source https://github.com/wegolook/vin-validator
     */
    isValidVIN: function(vin, locale) {

        locale = locale || 'US';

        switch (locale) {
            case 'US':
                vin = vin.toLowerCase()

                if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/.test(vin)) {
                    return false;
                }

                var transliterationTable = {
                    '0': 0,
                    '1': 1,
                    '2': 2,
                    '3': 3,
                    '4': 4,
                    '5': 5,
                    '6': 6,
                    '7': 7,
                    '8': 8,
                    '9': 9,
                    'a': 1,
                    'b': 2,
                    'c': 3,
                    'd': 4,
                    'e': 5,
                    'f': 6,
                    'g': 7,
                    'h': 8,
                    'j': 1,
                    'k': 2,
                    'l': 3,
                    'm': 4,
                    'n': 5,
                    'p': 7,
                    'r': 9,
                    's': 2,
                    't': 3,
                    'u': 4,
                    'v': 5,
                    'w': 6,
                    'x': 7,
                    'y': 8,
                    'z': 9
                }

                var weightsTable = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2]
                var sum = 0;

                for (var i = 0; i < vin.length; ++i) {
                    sum += transliterationTable[vin.charAt(i)] * weightsTable[i];
                }

                var mod = sum % 11;
                return mod === 10 ? vin.charAt(8) === 'x' : vin.charAt(8) == mod;
                break;
        }
        return false;
    },

    /**
     *  Validate postal code
     *  @param {String} val
     *  @param {String} 2-digit locale (optional)
     *  @param {Boolean} resticted validation (optional)
     *  @return {Boolean}
     *  @TO-DO: add locale-based VIN validation: US-only for now
     */
    isPostalCode: function(zip, locale, restricted) {

        locale = locale || 'US';
        restricted = restricted === false ? false : true;

        switch (locale) {
            case 'US':
                if (restricted) {
                    return /(^\d{5}$)/.test(zip);
                }
                else {
                    return /(^\d{5}$)|(^\d{5}-\d{4}$)/.test(zip);
                }
                break;
        }
        return false;
    }
};