"use strict";

/**
 * KeyUtils
 *
 * @author Frank Young
 * @constructor
 */
function KeyUtils(opts){

    opts = opts || {};

    // defaults to 20
    this.__maxHistoryLength = opts.maxHistoryLength || 20;
    this.__keyHistory = [];
};

/**
 * Logs keystroke charCode to __keyHistory
 * @chainable
 * @param charCode
 */
KeyUtils.prototype.log = function(charCode){

    this.__keyHistory.push(charCode);

    if(this.__keyHistory.length > this.__maxHistoryLength){
        // remove first entry
        this.__keyHistory.shift();
    }

    return this;

};

/**
 * Returns keystroke history
 * @returns {Array}
 */
KeyUtils.prototype.getHistory = function(){
    return this.__keyHistory;
};

/**
 * Need to know if user entered a specific keystroke sequence?
 *
 *  Usage in a React Component:
 *
 *     keyUtil: new KeyUtils(),
 *
 *     onKeyDown: function(e){
 *         var charCode = e.which;
 *         var someCharSequence = [KeyUtils.LEFT,KeyUtils.LEFT,KeyUtils.LEFT, KeyUtils.RIGHT];
 *         if(keyUtil.log(charCode).isSequence(someCharSequence)){
 *             // do something
 *         }
 *     }
 *
 * Returns Boolean if sequence has been matched
 * @returns {Array}
 */
KeyUtils.prototype.isSequence = function(sequence){

    // up, up, down, down, left, right, left, right, b, a
    if(this.__keyHistory.length >= sequence.length){

        var k = KeyUtils;
        var strokes = this.__keyHistory.slice(this.__keyHistory.length - sequence.length);

        for(var i = 0, n = strokes.length ; i < n ; i++){
            if(strokes[i] !== sequence[i]){
                return false;
            }
        }

        return true;

    }

    return false;
};

/**
 * Detects if Konami code was pressed
 * @returns {boolean}
 */
KeyUtils.prototype.isKonami = function(){
    // up, up, down, down, left, right, left, right, b, a
    var k = KeyUtils;
    var sequence = [k.UP, k.UP, k.DOWN, k.DOWN, k.LEFT, k.RIGHT, k.LEFT, k.RIGHT, 66, 65];
    return this.isSequence(sequence)
};

// helper functions to add keyboard event handlers to the window

KeyUtils.prototype.on = function(event, func){
    window.addEventListener(event, func);
    return this;
};

KeyUtils.prototype.off = function(event, func){
    window.removeEventListener(event, this.func);
    return this;
};


// static helper methods
KeyUtils.isNumeric = function(keyCode){
    var isNumber = !isNaN(parseInt(String.fromCharCode(keyCode)))
    // allow for numbers or [.,]
    return isNumber || [44, 46, 188, 190].indexOf(keyCode) > -1
}



// char code constants
KeyUtils.ENTER = 13;
KeyUtils.CTRL  = 17;
KeyUtils.LEFT  = 37;
KeyUtils.UP    = 38;
KeyUtils.RIGHT = 39;
KeyUtils.DOWN  = 40;
KeyUtils.TAB   = 9;

module.exports = KeyUtils;