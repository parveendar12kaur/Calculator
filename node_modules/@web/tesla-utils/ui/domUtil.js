/** 
* Really basic DOM/CSS utils
*
* (so we don't have to rely on jQuery as a dependency in our React projects)
* 
* Often we need to integrate React applications in a page that contains DOM elements that 
* are outside our React project, yet requirements dictate that we have some control over those elements 
* (showing, hiding, adding removing classes, etc). For elements within our React project, there will rarely be a
* good reason to use any of these utility methods as React has other mechanisms to accomplish them
* 
* @author Frank Young
*/
module.exports = {

    /**
     * Super simple element selector 
     * Currently this returns onle a single DOM element, if multiple elements match selector, the first one is returned
     * 
     * @param {String} selector -- element selector (only takes an element id, class or tagName at the moment)
     * @param {DOMElement} root (optional) -- the element to start searching from
     * @returns {HTML DOMElement}
     */
    get: function(selector, root){

        root = root || document;

        if(typeof selector === 'string'){

            if(selector.substring(0,1) === '#'){
                return document.getElementById(selector.substring(1));
            }
            else if(selector.substring(0,1) === '.'){
                var elements = root.getElementsByClassName(selector);
                if(elements.length){
                    return elements[0];
                }
            }
            else{
                var elements = root.getElementsByTagName(selector);
                if(elements.length){
                    return elements[0];
                }
            }
        }
        else{
            return selector;
        }
    },

    /**
     * Tests if element has className
     * @param el
     * @param classNameToSearch
     * @returns {boolean}
     */
    hasClass: function(el, classNameToSearch) {

        var classList;
        var className = el.getAttribute('class');

        if (el.classList) {
            classList = Array.prototype.slice.apply(el.classList);
        } 
        else if (className) {
            classList = className.split(' ');
        }

        return (classList && classList.indexOf(classNameToSearch) > -1);
    },

    /**
     * Adds class to element
     * @param {DOM Element} el
     * @param {String} className
     */
    addClass: function(el, className) {

        if (el.classList){
            el.classList.add(className);
        }
        else if (!this.hasClass(el, className)){
            el.className += ' ' + className;
        }
    },

    /**
     * Remove class from element
     * @param {DOM Element} el
     * @param {String} className
     */
    removeClass: function(el, className) {
        if (el.classList){
            el.classList.remove(className);
        }
        else if (this.hasClass(el, className)) {
            var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
            el.className = el.className.replace(reg, ' ');
        }
    }
};