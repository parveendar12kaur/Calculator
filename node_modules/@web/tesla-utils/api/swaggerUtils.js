/**
 * Utility methods to make things easier when working with swagger API's
 *
 * Usage:
 *
 *    var swaggerUtils = require('@web/tesla-utils/api/swaggerUtils');
 *    var restRoutes = require('rest-routes-module.js');
 *
 *    Note: if you don't want one of your routes actually added to the rest server,
 *    then add enabled: false in the route spec definition
 *
 *    swaggerUtils.addToRestServer(swaggerUtils.getModuleRoutes(restRoutes))
 *
 * @type {Object}
 * @author Frank Young
 */
module.exports = {

    /**
     * Iterates through all exports found restInterface looking for swagger apis
     *
     *   Usage:
     *
     *    swaggerUtils.getModuleRoutes(restModule1, restModule2 ...)
     *
     * @param module {Object} (...rest parameter) one or more swagger routes modules
     * @returns {Array}
     */
    getModuleRoutes: function(/* module1, module2, module3 */){

        var modules = Array.prototype.slice.call(arguments, 0);
        var routes = [];

        for(var i = 0; i < modules.length; i++){

            var module = modules[i];

            for(var p in module){

                var route = module[p];

                // make sure route has at least spec && action
                if(route.spec && route.action){

                    var spec = route.spec;
                    var method = spec.method;

                    // assumes all interfaces are enabled by default
                    if(spec.enabled !== false){
                        routes.push({
                            name: p,
                            restInterface: route,
                            method: method
                        });
                    }
                }
            }
        }

        return routes;
    },

    /**
     * Adds all routes in array to restServer
     *
     * @see @web/tesla-rest-server - http://jarvis.teslamotors.com:3002/#/readme/web-tesla-rest-server
     * @param routes
     * @param restServer
     */
    addToRestServer: function(routes, restServer) {

        for(var i = 0; i < routes.length; i++){

            switch(routes[i].method){

                case 'POST':
                    restServer.post(routes[i].restInterface);
                    break;

                case 'GET':
                    restServer.get(routes[i].restInterface);
                    break;

                case 'DELETE':
                    restServer.delete(routes[i].restInterface);
                    break;
            }
        }
    }

};