var _ = require('lodash'),
    request = require('superagent'),
    Promise = require('es6-promise').Promise,
    AcceptTypes = require('../constants/AcceptTypes');

/**
 * Abstract class provides simple promise based interface for GET/POST methods
 *
 * Usage:
 *
 *  var MyService = function(){
 *
 *     return Object.assign({
 *         
 *         getSomething: function(id){
 *             return this.get({
 *                 url: 'http://example.com/api/endpoint',
 *                 data: {
 *                     id: id
 *                 }
 *             })
 *         },
 *         
 *         postSomething: function(id, value){
  *             return this.post({
 *                 url: 'http://example.com/api/endpoint',
 *                 data: {
 *                     id: id,
 *                     value: value
 *                 }
 *             })
 *         }
 *     }, new AbstractRestClient())
 *    
 *  }
 * 
 * 
 * @returns {{
 *     get: Function, 
 *     post: Function, 
 *     postJSON: Function, 
 *     cache: Function
 * }}
 *
 * @constructor
 */
var AbstractRestClient = function(){

    var defaultContentType = 'application/x-www-form-urlencoded';
    var defaultAcceptType = 'application/json';
    var cache = {};

    return {

        /**
         * Wraps an data object in a promise
         * useful for when some code expects a promise that resolves an ajax call,
         * but you already have the data available
         */
        response: function(data, fail){
            return new Promise(function(resolve, reject){
                if(resolve){
                    resolve(data);
                }
                else if(fail){
                    reject(fail);
                }
            });
        },

        /**
         * Sends /DELETE request
         * @param req {Object} request object
         * @return {Promise}
         */
        del: function(req){
            return new Promise(function(resolve, reject){
                request.del(req.url)
                    .accept(defaultAcceptType)
                    .end(function(err, res){
                        if(err){
                            reject(res ? res.body : err);
                        }
                        else{
                            resolve(res.body);
                        }
                    });
            });
        },

        /**
         * Sends /GET request
         * @param req {Object} request object
         * return {Promise}
         */
        get: function(req){
            return new Promise(function(resolve, reject){

                var url = (typeof req === 'string') ? req : req.url;

                request.get(url)
                    .timeout(req.timeout || 1000 * 10)
                    .accept(defaultAcceptType)
                    .query(req.data)
                    .end(function(err, res){
                        if(err){
                            reject(res ? res.error : err);
                        }
                        else{
                            resolve(res.body);
                        }
                    });
            });
        },

        /**
         * Sends POST request
         * @param req {Object} request object
         * @return {Promise}
         */
        post: function(req){

            return new Promise(function(resolve, reject){

                var acceptType = req.acceptType || defaultAcceptType;

                request.post(req.url)
                    .timeout(req.timeout || 1000 * 10)
                    .set('Content-Type', req.contentType || defaultContentType)
                    .accept(acceptType)
                    .send(req.data)
                    .on('error', function(err){
                        console.error(err);
                    })
                    .end(function(err, res){
                        if(err){
                            reject(res && res.body ? res.body : err);
                        }
                        else{
                            var response = (acceptType === AcceptTypes.JSON) ? res.body : res.text;
                            resolve(response);
                        }
                    });
            });
        },

        /**
         * Sends POST request with JSON payload
         * @param req {Object} request object
         * @return {Promise}
         */
        postJSON: function(req){
            req.data = JSON.stringify(req.data);
            return this.post(_.extend({
                contentType: 'application/json; charset=utf-8'
            }, req));
        },

        /*
        * Simple in memory cache
        *
        * @param key
        * @param value
        * @expires (date in milliseconds that entry expires)
        */
        cache: function(key, value, expires){

            var now = new Date().getTime();

            if(arguments.length === 1){

                var match = cache[key];

                if(!match){
                    return null;
                }
                else if(match.expires){
                    if(match.expires >= now){
                        return match.value;
                    }
                    else{
                        delete cache[key];
                    }
                }
                else{
                    return match.value;
                }

            }
            else{

                var hour = 1000 * 60 * 60;
                expires = expires || now + hour;

                cache[key] = {
                    expires: expires,
                    value: value
                };
            }
        }
    };
};

module.exports = AbstractService;