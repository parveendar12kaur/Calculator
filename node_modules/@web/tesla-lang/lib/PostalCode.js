// -- Postal Code Mapping --
// 
// Zipcode patterns taken from Drupal: tesla_locale.main.inc
// Countries with null zipcode patterns either do not use zipcodes or zipcodes are not considered reliable in that country
//
var parseLocale = require('./Utils').parseLocale;
var defaultCountryCode = 'US';
var postalCodeRegexMap = {
    'AD': null,
    'AE': null,
    'AT': /^[0-9]{4}$/,
    'AU': /^[0-9]{4}$/,
    'BE': /^[0-9]{4}$/,
    'BG': /^[0-9]{4}$/,
    'CA': /^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}[0-9]{1}[ABCEGHJKLMNPRSTVWXYZabceghjklmnprstvwxyz]{1}[ ]?[0-9]{1}[ABCEGHJKLMNPRSTVWXYZabceghjklmnprstvwxyz]{1}[0-9]{1}$/,    
    'CH': /^[0-9]{4}$/,
    'CY': /^[0-9]{4}$/,
    'CN': /^([0-9]{6})?$/,
    'CZ': /^[0-9]{3}[ ]?[0-9]{2}$/,
    'DE': /^[0-9]{5}$/,
    'DK': /^[0-9]{4}$/,
    'EE': /^[0-9]{5}$/,
    'ES': /^([0-4][0-9]|[5][0-2])[0-9]{3}$/,
    'EU': null,
    'FI': /^[0-9]{5}$/,
    'FR': /^[0-9]{5}$/,
    'GB': /^[a-zA-Z0-9]{1}/,
    'GI': /^[A-Z]{1,2}[0-9]{1,2}[A-Z]?[0-9][A-Z]{2}$/,
    'GR': /^[0-9]{3}[ ]?[0-9]{2}$/,
    'HK': null,
    'HR': /^[0-9]{5}$/,
    'HU': /^[0-9]{4}$/,
    'IE': /^([a-zA-Z0-9\s]{1,9})?$/,
    'IS': /^[0-9]{3}/,
    'IT': /^[0-9]{5}/,
    'JP': /^[0-9]{3}-[0-9]{4}$/,
    'JO': /^[0-9]{5}$/,
    'KR': /^([0-9]{3}[-]?[0-9]{3}|[0-9]{5})$/,
    'LI': /^[0-9]{4}/,
    'LT': /^[0-9]{5}/,
    'LU': /^[0-9]{4}$/,
    'LV': /^(LV-)[0-9]{4}/,
    'MC': /^[0-9]{5}/,
    'MO': null,
    'MT': null,
    'MX': /^[0-9]{5}$/,
    'NL': /^[0-9]{4}[ ]?[A-Za-z]{2}$/,
    'NO': /^[0-9]{4}$/,
    'NZ': /^[0-9]{4}$/,
    'PL': /^[0-9]{2}[-]?[0-9]{3}$/,
    'PT': /^[0-9]{4}-[0-9]{3}$/,
    'RO': /^[0-9]{6}$/,
    'RS': null,
    'RU': /^[0-9]{6}$/,
    'SE': /^[0-9]{3}[ ]?[0-9]{2}$/,
    'SI': /^[0-9]{4}$/,
    'SK': /^[0-9]{3}[ ]?[0-9]{2}$/,
    'SM': /^[0-9]{5}$/,
    'TH': /^[0-9]{5}$/,
    'TR': /^[0-9]{4,5}$/,
    'TW': /^[0-9]{3,5}$/,
    'US': /^([0-9]{5})(-[0-9]{4})?$/    
};


module.exports = {
	// for browser use only
	setLocale(locale){
		var countryCode = parseLocale(locale).country;
		if(postalCodeRegexMap.hasOwnProperty(countryCode)){
            defaultCountryCode = countryCode;
            return true;
		}
		else {
			console.error('cannot set',countryCode,'setLocale: market not supported');
			return false;
		}
	},
	/**
	 * Returns boolean indicating whether or not you should use zipcodes for geocoding or whether zipcodes should be considered during address validation.
	 * If it returns false, you should not consider zipcode as a valid part of an address for specified countryCode
	 * @param  {String} countryCode
	 * @return {Boolean}
	 */
	useZipCode(countryCode){
        return !!postalCodeRegexMap[countryCode];
	},
    /**
     * isValidZip -- validates zipcode against pattern
     * @param  {String}  countryCode [2-digit country code e.g: US, GB, FR, etc]
     * @param  {String}  zipCode
     * @return {Boolean}
     */
    isValidZip: function(countryCode, zipCode) {

        if(arguments.length === 1) {
            zipCode = arguments[0];
            countryCode = defaultCountryCode;
        }

        // unsupported market
        if(!postalCodeRegexMap.hasOwnProperty(countryCode)) {
            console.warn('cannot validate zipcode', countryCode, 'not supported');
            return false;
        }
        else if(postalCodeRegexMap[countryCode] === null){
            // country does not use zipcode        	
           return true;
        }

        return !!postalCodeRegexMap[countryCode].exec(zipCode);
    }
};