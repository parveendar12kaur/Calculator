'use strict';

/**
 * Currency and Number Formatting for Tesla Applications
 *
 * Contains functionality ported from existing number/money localization code used in teslamotors.com
 * and additional utils
 *
 * Dependencies: accounting.js
 * @see https://www.npmjs.com/package/accounting
 *
 * @author Frank Young fryoung@teslamotors.com
 */
var accounting = require('accounting'),
    _keys = require('lodash/keys'),
    _assign = require('lodash/assign');

// moved currency/number formatting config to external json file
var currency_locale = require('../data/number_format_config.json');

var parseLocale = require('./Utils').parseLocale;

// default currency formatting options (passed to accounting.js)
var currency_default = {
    // This is custom, we add it.
    currency: 'USD',
    // default currency symbol is '$'
    symbol: '$',
    // controls output: %s = symbol, %v = value (can be object, see docs)
    format: '%s%v',
    // decimal point separator
    decimal: '.',
    // thousands separator
    thousand: ',',
    // precision (decimals)
    precision: 0,
    // digit grouping (not implemented yet)
    grouping: 3
};

// default to US locale
var __locale = 'en_US';
var __thousandSymbol = ',';
var __decimalSymbol = '.';
var __precisionDefault = 0;

// contains all supported locale codes
var __supportedLocales = _keys(currency_locale);

// caches format objects for faster lookups
var __cachedFormat = {};



/**
 * Gets normalized locale format object (fills in any missing properties from the default settings)
 *
 * @private
 * @return {Object}
 */
function __getLocaleFormat(locale) {

    locale = locale || __locale;

    var parsedLocale = parseLocale(locale);

    if (__cachedFormat[locale]) {
        return __cachedFormat[locale];
    } else {
        var fmt;

        if (currency_locale[locale]) {
            fmt = _assign({}, currency_default, currency_locale[locale]);
        }
        else {
            // making this a bit more robust by handling situation where proper locale code ('en_US' was not passed, only language or country code)

            for (var i = 0, n = __supportedLocales.length; i < n; i++) {
                if (__supportedLocales[i].indexOf(parsedLocale.lang) > -1) {
                    fmt = _assign({}, currency_default, currency_locale[__supportedLocales[i]]);
                    break;
                }
            }
        }

        // default to US if format object was not found for locale
        if (!fmt) {
            fmt = currency_locale.en_US;
        }

        __cachedFormat[locale] = fmt;

        return fmt;
    }
}

var self = module.exports = {

    supportedLocales: __supportedLocales,

    /**
     * Sets locale to use for formatting
     * @param {String} locale [standard locale language + country code in format of en_US, de_DE, etc...]
     */
    setLocale: function(locale) {
        __locale = locale;
    },

    /**
     * Formats number as currency according to current locale rules defined in number_format_config.json
     *
     * @param num
     * @param locale (optional) defaults to locale set in setLocale or en_US
     * @param opts {Object} (optional)
     */
    formatCurrency: function(num, locale, opts) {

        opts = opts || {};
        locale = locale || __locale;

        // if locale has already been set, then pass opts as 2nd parameter
        if (arguments.length === 2) {
            // opts was passed as 2nd argument, let's fix references
            if (typeof arguments[1] === 'object') {
                opts = arguments[1];
                locale = __locale;
            }
        }

        // update currency settings object
        accounting.settings.currency = _assign(accounting.settings.currency, __getLocaleFormat(locale));

        // show currency symbol or not
        if (opts.showCurrSymbol === false) {
            accounting.settings.currency.symbol = '';
        }

        // set decimal places if sent as an arg, otherwise, use default setting.
        if (opts.hasOwnProperty('precision')) {
            accounting.settings.currency.precision = opts.precision;
        }

        // Run our values through the accounting formatMoney method if num is not undefined.
        if (num !== undefined) {
            if(num < 0){
                return ' - ' + accounting.formatMoney( Math.abs(num), accounting.settings.currency);
            }
            else{
                return accounting.formatMoney(num, accounting.settings.currency);
            }
        }
        else {
            return '';
        }
    },

    /**
     * Returns formatted number
     *
     * @param num
     * @param precision (how many decimal places?)
     * @param locale - locale region
     */
    formatNumber: function(num, precision, locale) {

        locale = locale || __locale;
        precision = precision || __precisionDefault;

        var cfg = currency_locale[locale],
            thousandSymbol = cfg.thousand || __thousandSymbol,
            decimalSymbol = cfg.decimal || __decimalSymbol;

        return accounting.formatNumber(num, precision, thousandSymbol, decimalSymbol);
    },

    /**
     * Returns number formatted as percent
     *
     * @param num
     * @param precision (how many decimal places?)
     * @param locale - locale region
     * @return {String}
     */
    formatPercent: function(num, precision, locale) {

        if (!precision && num < 1) {
            num = num * 100;
        }

        return self.formatNumber(num, precision, locale) + '%';
    },

    /**
     * Returns format object for passed locale param
     * @param  {String} locale -- standard locale code: languageCode + '_ ' + countryCode (en_US, de_DE, etc)
     * @return {Object}
     */
    getLocaleFormat: function(locale) {
        return __getLocaleFormat(locale);
    },

    /**
     * Sets the default number of decimals used to format currency
     * @param {Number} num -- number of decimals to format currency with (0|2)
     */
    setCurrencyPrecision: function(num) {
        if (num === 0 || num === 2) {
            currency_default.precision = num;
            __cachedFormat = {};
        }
    },


    /**
    * Returns a formated credit card number
    * @param num
    * @return {Number} num -- XXXX XXXX XXXX XXXX
    */
    formatCreditCard: function(value) {
        value = value.toString();

        var v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
        var matches = v.match(/\d{4,16}/g);
        var match   = matches && matches[0] || '';
        var parts   = [];
        for (var i = 0, len = match.length; i < len; i += 4) {
            parts.push(match.substring(i, i + 4));
        }

        if (parts.length) {
            return parts.join(' ');
        } 
        else {
            return value;
        }
    }, 

    /**
    * Returns a formated Expiration Date
    * @param num
    * @param string format type
    * @return {Number} num -- MM / YY
    */
    formatExpirationDate: function(value, format) {
        value = value.toString();

        switch(format) {
            case 'MM/YY':
                var v = value.replace(/\s\/+/g, '').replace(/[^0-9]/gi, '');
                var matches = v.match(/\d{2,4}/g);
                var match   = matches && matches[0] || '';
                var parts   = [];
                for (var i = 0, len = match.length; i < len; i += 2) {
                    parts.push(match.substring(i, i + 2));
                }
                if (parts.length) {
                    var joined = parts.join(' / ');
                    if (joined.length == 2) {
                        return joined + ' / ';
                    }
                    return joined;
                } 
                else {
                    return value;
                }
        }

        return value;

    }


};
